<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simyy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://simyy.cn/"/>
  <updated>2020-06-05T11:11:59.210Z</updated>
  <id>http://simyy.cn/</id>
  
  <author>
    <name>simyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis AE事件驱动</title>
    <link href="http://simyy.cn/2020/06/05/redis-ae/"/>
    <id>http://simyy.cn/2020/06/05/redis-ae/</id>
    <published>2020-06-05T10:58:39.000Z</published>
    <updated>2020-06-05T11:11:59.210Z</updated>
    
    <content type="html"><![CDATA[<p>AE事件驱动是Redis高性能实现的基础。</p><a id="more"></a><p><img src="/images/redis-ae-10.png" alt=""></p><h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><p><code>Redis</code>实现了一套事件驱动器<code>AE</code>，理由也很简单，逻辑简单可控。</p><blockquote><p><code>Memcached</code>的事件驱动时基于<code>libevent</code>的。</p></blockquote><h5 id="事件结构"><a href="#事件结构" class="headerlink" title="事件结构"></a>事件结构</h5><p><img src="/images/redis-ae-1.png" alt=""></p><p><code>aeEventLoop</code>是整个事件驱动的核心，事件的注册与触发都基于此。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 事件循环结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeEventLoop</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> setsize;                  <span class="comment">// 支持连接的最大句柄数量</span></span><br><span class="line">    aeFileEvent *events;           <span class="comment">// 已注册的事件</span></span><br><span class="line">    aeFiredEvent *fired;           <span class="comment">// 已触发的事件</span></span><br><span class="line">    aeTimeEvent *timeEventHead;     <span class="comment">// 时间事件(定时触发)</span></span><br><span class="line">    aeBeforeSleepProc *beforesleep; <span class="comment">// 事件循环sleep之前的的执行函数 </span></span><br><span class="line">    aeBeforeSleepProc *aftersleep;  <span class="comment">// 事件循环sleep之后的的执行函数</span></span><br><span class="line">    <span class="keyword">void</span> *apidata;                <span class="comment">// select/poll/epoll的API交互数据</span></span><br><span class="line">    ...</span><br><span class="line">&#125; aeEventLoop;</span><br></pre></td></tr></table></figure><p><code>aeFileEvent</code>是具体的事件结构，其中，包含了<code>事件类型</code>与<code>对应的处理函数</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AE_NONE 0       <span class="comment">// 未注册</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AE_READABLE 1   <span class="comment">// 可读</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AE_WRITABLE 2   <span class="comment">// 可写</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AE_BARRIER 4    <span class="comment">// 强制先写后读</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文件(IO)事件结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeFileEvent</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 读写标记 */</span></span><br><span class="line">    <span class="keyword">int</span> mask; <span class="comment">/* one of AE_(READABLE|WRITABLE|BARRIER) */</span></span><br><span class="line">    aeFileProc *rfileProc; <span class="comment">// 读事件对应的执行函数</span></span><br><span class="line">    aeFileProc *wfileProc; <span class="comment">// 写事件对应的执行函数</span></span><br><span class="line">    <span class="keyword">void</span> *clientData;     <span class="comment">// 事件相关的数据</span></span><br><span class="line">&#125; aeFileEvent;</span><br></pre></td></tr></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p><img src="/images/redis-ae-2.png" alt=""></p><p><code>aeCreateEventLoop</code>是用于初始化事件循环结构体。</p><p><code>setsize</code>是Redis支持句柄的数量，在eventloop初始化时用于<code>初始化事件的存储大小</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化事件循环 */</span></span><br><span class="line"><span class="function">aeEventLoop *<span class="title">aeCreateEventLoop</span><span class="params">(<span class="keyword">int</span> setsize)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化事件循环</span></span><br><span class="line">    <span class="keyword">if</span> ((eventLoop = zmalloc(<span class="keyword">sizeof</span>(*eventLoop))) == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 设置默认支持最大连接的数量（也就是可存储的事件数量）</span></span><br><span class="line">    eventLoop-&gt;events = zmalloc(<span class="keyword">sizeof</span>(aeFileEvent)*setsize);</span><br><span class="line">    <span class="comment">// 已触发的事件的最大数量与注册事件的最大数量相同</span></span><br><span class="line">    eventLoop-&gt;fired = zmalloc(<span class="keyword">sizeof</span>(aeFiredEvent)*setsize);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 创建事件循环触发器（select/epoll/...）</span></span><br><span class="line">    <span class="comment">// 具体参考：IO多路复用的多种实现</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiCreate(eventLoop) == <span class="number">-1</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">/* Events with mask == AE_NONE are not set. So let's initialize the</span></span><br><span class="line"><span class="comment">     * vector with it. */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; setsize; i++)</span><br><span class="line">        eventLoop-&gt;events[i].mask = AE_NONE;</span><br><span class="line">    <span class="keyword">return</span> eventLoop;</span><br><span class="line">    <span class="keyword">return</span> eventLoop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Redis</code>支持多个地址端口的绑定，文件句柄都存储在<code>server.ipfd</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ipfd[CONFIG_BINDADDR_MAX]; <span class="comment">// 用于监听客户端请求的文件句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 服务器初始化 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initServer</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// socket.listen绑定监听端口</span></span><br><span class="line">    <span class="keyword">if</span> (server.port != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == C_ERR)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 每一个fd创建一个可读事件，并设置socket.accept回调</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.ipfd_count; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,</span><br><span class="line">            acceptTcpHandler,<span class="literal">NULL</span>) == AE_ERR)</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>aeCreateFileEvent</code>是用于为监听的句柄创建事件及其对应的处理器，其中，<code>aeApiAddEvent</code>存在多种IO多路复用的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为句柄创建事件 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aeCreateFileEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="keyword">int</span> fd, <span class="keyword">int</span> mask,</span></span></span><br><span class="line"><span class="function"><span class="params">        aeFileProc *proc, <span class="keyword">void</span> *clientData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取句柄对应的事件</span></span><br><span class="line">    aeFileEvent *fe = &amp;eventLoop-&gt;events[fd];</span><br><span class="line">    <span class="comment">// 将句柄加入到事件监听中（select/epoll/...）</span></span><br><span class="line">    <span class="comment">// 具体参考：IO多路复用的多种实现</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiAddEvent(eventLoop, fd, mask) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    fe-&gt;mask |= mask;</span><br><span class="line">    <span class="comment">// 设置事件回调（区分读写）</span></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) fe-&gt;rfileProc = proc;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) fe-&gt;wfileProc = proc;</span><br><span class="line">    <span class="comment">// 设置客户端信息</span></span><br><span class="line">    fe-&gt;clientData = clientData;</span><br><span class="line">    <span class="keyword">return</span> AE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/redis-ae-3.png" alt=""></p><p><code>acceptTcpHandler</code>是<code>Socket.Accept</code>接收到新的客户端请求的处理器，用于设置后续的可读事件，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 处理监听到的Accept请求 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acceptTcpHandler</span><span class="params">(aeEventLoop *el, <span class="keyword">int</span> fd, <span class="keyword">void</span> *privdata, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span>(max--) &#123;</span><br><span class="line">        <span class="comment">// Accept句柄fd监听到的请求，返回客户端句柄cfd</span></span><br><span class="line">        cfd = anetTcpAccept(server.neterr, fd, cip, <span class="keyword">sizeof</span>(cip), &amp;cport);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">/* Accept成功后设置可读事件 */</span></span><br><span class="line">        acceptCommonHandler(cfd,<span class="number">0</span>,cip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acceptCommonHandler</code>是用于Accept后用于<code>初始化客户端并设置可读事件</code>的处理器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acceptCommonHandler</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> flags, <span class="keyword">char</span> *ip)</span> </span>&#123;</span><br><span class="line">    client *c;</span><br><span class="line">    <span class="comment">/* 创建客户端（内部初始化可读事件） */</span></span><br><span class="line">    <span class="keyword">if</span> ((c = createClient(fd)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化客户端并设置可读事件 */</span></span><br><span class="line"><span class="function">client *<span class="title">createClient</span><span class="params">(<span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    client *c = zmalloc(<span class="keyword">sizeof</span>(client));</span><br><span class="line">    <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">        anetNonBlock(<span class="literal">NULL</span>,fd);                         <span class="comment">// 是否阻塞</span></span><br><span class="line">        anetEnableTcpNoDelay(<span class="literal">NULL</span>,fd);                  <span class="comment">// 是否关闭Nagle算法</span></span><br><span class="line">        <span class="keyword">if</span> (server.tcpkeepalive)</span><br><span class="line">            anetKeepAlive(<span class="literal">NULL</span>,fd,server.tcpkeepalive);   <span class="comment">// 设置keepalive</span></span><br><span class="line">        <span class="comment">// 为当前客户端创建可读事件，并设置读取处理函数readQueryFromClient（下面有详细介绍）</span></span><br><span class="line">        <span class="keyword">if</span> (aeCreateFileEvent(server.el,fd,AE_READABLE,</span><br><span class="line">            readQueryFromClient, c) == AE_ERR)</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到此，<code>Redis</code>服务端的<code>Socket绑定与监听</code>、<code>客户端初始化</code>等初始化逻辑已经分析完毕。</p></blockquote><h5 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h5><p>Redis的处理过程是<code>单线程的</code>，事件驱动的核心就在<code>aeMain</code>这个循环体内。</p><blockquote><p>基于内核提供的<code>select/poll/epoll</code>来轮询事件实现循环执行。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aeMain</span><span class="params">(aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 事件循环</span></span><br><span class="line">    <span class="keyword">while</span> (!eventLoop-&gt;stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;beforesleep != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="comment">// 触发事件循环的前置处理器</span></span><br><span class="line">            eventLoop-&gt;beforesleep(eventLoop);</span><br><span class="line">        <span class="comment">// 事件处理</span></span><br><span class="line">        aeProcessEvents(eventLoop, AE_ALL_EVENTS|AE_CALL_AFTER_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><p><img src="/images/redis-ae-4.png" alt=""></p><p><code>aeProcessEvents</code>是具体的处理逻辑，包括了<code>事件获取</code>、<code>事件分发</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 事件处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aeProcessEvents</span><span class="params">(aeEventLoop *eventLoop, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理数量</span></span><br><span class="line">    <span class="keyword">int</span> processed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IO多路复用API, 获取并设置等待处理的事件数量（eventloop.fired）</span></span><br><span class="line">    <span class="keyword">int</span> numevents = aeApiPoll(eventLoop, tvp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件循环的后置处理器</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;aftersleep != <span class="literal">NULL</span> &amp;&amp; flags &amp; AE_CALL_AFTER_SLEEP)</span><br><span class="line">        eventLoop-&gt;aftersleep(eventLoop);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* 开始分发事件，执行对应的处理器 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历已触发待处理的事件</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numevents; j++) &#123;</span><br><span class="line">        aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];</span><br><span class="line">        <span class="keyword">int</span> mask = eventLoop-&gt;fired[j].mask;  <span class="comment">// 事件类型</span></span><br><span class="line">        <span class="keyword">int</span> fd = eventLoop-&gt;fired[j].fd;      <span class="comment">// 事件句柄</span></span><br><span class="line">        <span class="keyword">int</span> fired = <span class="number">0</span>;                        <span class="comment">// 统计事件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否开启强制先写后读</span></span><br><span class="line">        <span class="keyword">int</span> invert = fe-&gt;mask &amp; AE_BARRIER;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果未开启先写后读且为读事件</span></span><br><span class="line">        <span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">            fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">            fired++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果为写事件</span></span><br><span class="line">        <span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果开启先写后读且为读事件</span></span><br><span class="line">        <span class="keyword">if</span> (invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理数量+1</span></span><br><span class="line">        processed++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理定时事件</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS)</span><br><span class="line">        processed += processTimeEvents(eventLoop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processed; <span class="comment">/* return the number of processed file/time events */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面的源码分析得出：<code>事件的收集工作是系统负责的，Redis仅通过每次的循环来不断拿到最新的触发事件</code>。</p></blockquote><p><strong>AE事件驱动的原理：IO多路复用</strong></p><p>在上面的处理过程中，使用了<code>aeApiPoll</code>这个函数，按不同平台的实现方式有：</p><ul><li><code>ae_evport</code>：Solaris 10</li><li><code>ae_kqueue</code>：OS X / FreeBSD</li><li><code>ae_select</code>：通用的</li><li><code>ae_epoll</code>：Linux</li></ul><blockquote><p><a href="https://stackoverflow.com/questions/26420947/what-are-the-underlying-differences-among-select-epoll-kqueue-and-evport" target="_blank" rel="noopener">What are the underlying differences among select, epoll, kqueue, and evport?</a></p></blockquote><p><code>Select</code>最多支持1024个文件句柄，由于每次都需要遍历所有的操作符的状态，因此，时间复杂度是O(n)；</p><p><code>Evport</code>、<code>Epoll</code>、<code>KQueue</code>支持更多的文件句柄，基于系统的实现策略不需要遍历操作符，时间复杂度是O(1)。</p><p>这里仅分析基于<code>epoll</code>的实现。</p><h6 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">aeApiAddEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="keyword">int</span> fd, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ee</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 识别读写事件，设置EPOLLIN/EPOLLOUT</span></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) ee.events |= EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) ee.events |= EPOLLOUT;</span><br><span class="line">    ee.data.fd = fd;</span><br><span class="line">    <span class="comment">// 调用epoll的epoll_ctl注册需要监听的事件</span></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(state-&gt;epfd,op,fd,&amp;ee) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="事件获取"><a href="#事件获取" class="headerlink" title="事件获取"></a>事件获取</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AE事件获取</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">aeApiPoll</span><span class="params">(aeEventLoop *eventLoop, struct timeval *tvp)</span> </span>&#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="keyword">int</span> retval, numevents = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用epoll的epoll_wait获取等待事件（类似select调用）</span></span><br><span class="line">    retval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize,</span><br><span class="line">            tvp ? (tvp-&gt;tv_sec*<span class="number">1000</span> + tvp-&gt;tv_usec/<span class="number">1000</span>) : <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (retval &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">// 循环遍历所有已触发的事件</span></span><br><span class="line">        numevents = retval;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numevents; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">e</span> = <span class="title">state</span>-&gt;<span class="title">events</span>+<span class="title">j</span>;</span></span><br><span class="line">            <span class="comment">// 识别事件类型</span></span><br><span class="line">            <span class="keyword">if</span> (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;</span><br><span class="line">            <span class="keyword">if</span> (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;</span><br><span class="line">            <span class="keyword">if</span> (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;</span><br><span class="line">            <span class="keyword">if</span> (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;</span><br><span class="line">            <span class="comment">// 设置链接的文件句柄</span></span><br><span class="line">            eventLoop-&gt;fired[j].fd = e-&gt;data.fd;</span><br><span class="line">            <span class="comment">// 设置事件类型</span></span><br><span class="line">            eventLoop-&gt;fired[j].mask = mask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numevents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="事件处理-1"><a href="#事件处理-1" class="headerlink" title="事件处理"></a>事件处理</h6><p><strong>读取</strong></p><p><img src="/images/redis-ae-5.png" alt=""></p><p><code>readQueryFromClient</code>是从客户端读取请求数据的处理函数，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次读取Buffer的默认大小：16K</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROTO_IOBUF_LEN         (1024*16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取客户端请求 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readQueryFromClient</span><span class="params">(aeEventLoop *el, <span class="keyword">int</span> fd, <span class="keyword">void</span> *privdata, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 客户端连接的配置信息</span></span><br><span class="line">    client *c = (client*) privdata;</span><br><span class="line">    <span class="comment">// 设置读取大小</span></span><br><span class="line">    readlen = PROTO_IOBUF_LEN;</span><br><span class="line">    <span class="comment">// 获取客户端已经读取过的大小</span></span><br><span class="line">    qblen = sdslen(c-&gt;querybuf);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 扩展客户端请求buffer的大小</span></span><br><span class="line">    c-&gt;querybuf = sdsMakeRoomFor(c-&gt;querybuf, readlen);</span><br><span class="line">    <span class="comment">// 读取数据，追加在原有querybuf内容的后面</span></span><br><span class="line">    nread = read(fd, c-&gt;querybuf+qblen, readlen);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 处理客户端请求buffer中的数据</span></span><br><span class="line">    processInputBufferAndReplicate(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理Buffer</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInputBufferAndReplicate</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(c-&gt;flags &amp; CLIENT_MASTER)) &#123;</span><br><span class="line">        processInputBuffer(c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行</strong></p><p><img src="/images/redis-ae-6.png" alt=""></p><p><code>processInputBuffer</code>是用于解析客户端请求的Buffer并调用<code>processCommand</code>执行对应的操作，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 处理缓存内的请求数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInputBuffer</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置当前处理的客户端</span></span><br><span class="line">    server.current_client = c;</span><br><span class="line">    <span class="comment">// 循环读取Buffer并处理</span></span><br><span class="line">    <span class="keyword">while</span>(c-&gt;qb_pos &lt; sdslen(c-&gt;querybuf)) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 根据不同的请求类型，尝试解析请求命令（数据完整），否则，进入下一次循环</span></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;reqtype == PROTO_REQ_INLINE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (processInlineBuffer(c) != C_OK) <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c-&gt;reqtype == PROTO_REQ_MULTIBULK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (processMultibulkBuffer(c) != C_OK) <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            serverPanic(<span class="string">"Unknown request type"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无参数，重置客户端</span></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;argc == <span class="number">0</span>) &#123;</span><br><span class="line">            resetClient(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 执行命令</span></span><br><span class="line">            <span class="keyword">if</span> (processCommand(c) == C_OK) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 处理完毕清空当前处理客户端</span></span><br><span class="line">    server.current_client = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>processInlineBuffer</code>与<code>processMultibulkBuffer</code>是用于命令解析的，如果解析成功则执行命令，否则，进入下一轮循环读取剩余Buffer。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 执行命令 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">processCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理quit命令</span></span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(c-&gt;argv[<span class="number">0</span>]-&gt;ptr,<span class="string">"quit"</span>)) &#123;</span><br><span class="line">        addReply(c,shared.ok);</span><br><span class="line">        c-&gt;flags |= CLIENT_CLOSE_AFTER_REPLY;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询argv[0]对应的命令</span></span><br><span class="line">    c-&gt;cmd = c-&gt;lastcmd = lookupCommand(c-&gt;argv[<span class="number">0</span>]-&gt;ptr);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* 此处忽略了命令执行前的条件判断，命令的执行受主从、持久化等问题的影响 */</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 开始执行命令 </span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;flags &amp; CLIENT_MULTI &amp;&amp;</span><br><span class="line">        c-&gt;cmd-&gt;proc != execCommand &amp;&amp; c-&gt;cmd-&gt;proc != discardCommand &amp;&amp;</span><br><span class="line">        c-&gt;cmd-&gt;proc != multiCommand &amp;&amp; c-&gt;cmd-&gt;proc != watchCommand)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// MULTI 开启事务，命令入队列</span></span><br><span class="line">        queueMultiCommand(c);</span><br><span class="line">        addReply(c,shared.queued);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接执行命令</span></span><br><span class="line">        call(c,CMD_CALL_FULL);</span><br><span class="line">        c-&gt;woff = server.master_repl_offset;</span><br><span class="line">        <span class="keyword">if</span> (listLength(server.ready_keys))</span><br><span class="line">            handleClientsBlockedOnKeys();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命令入队列 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueMultiCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 申请空间</span></span><br><span class="line">    c-&gt;mstate.commands = zrealloc(c-&gt;mstate.commands,</span><br><span class="line">            <span class="keyword">sizeof</span>(multiCmd)*(c-&gt;mstate.count+<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 设置命令</span></span><br><span class="line">    mc = c-&gt;mstate.commands+c-&gt;mstate.count;</span><br><span class="line">    mc-&gt;cmd = c-&gt;cmd;</span><br><span class="line">    mc-&gt;argc = c-&gt;argc;</span><br><span class="line">    mc-&gt;argv = zmalloc(<span class="keyword">sizeof</span>(robj*)*c-&gt;argc);</span><br><span class="line">    <span class="built_in">memcpy</span>(mc-&gt;argv,c-&gt;argv,<span class="keyword">sizeof</span>(robj*)*c-&gt;argc);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>call</code>是在没有事务的情况下，直接执行，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 执行命令 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(client *c, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 通知监控</span></span><br><span class="line">    <span class="keyword">if</span> (listLength(server.monitors) &amp;&amp;</span><br><span class="line">        !server.loading &amp;&amp;</span><br><span class="line">        !(c-&gt;cmd-&gt;flags &amp; (CMD_SKIP_MONITOR|CMD_ADMIN)))</span><br><span class="line">    &#123;</span><br><span class="line">        replicationFeedMonitors(c,server.monitors,c-&gt;db-&gt;id,c-&gt;argv,c-&gt;argc);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 执行命令</span></span><br><span class="line">    c-&gt;cmd-&gt;proc(c);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 记录慢日志</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CMD_CALL_SLOWLOG &amp;&amp; c-&gt;cmd-&gt;proc != execCommand) &#123;</span><br><span class="line">        <span class="keyword">char</span> *latency_event = (c-&gt;cmd-&gt;flags &amp; CMD_FAST) ?</span><br><span class="line">                              <span class="string">"fast-command"</span> : <span class="string">"command"</span>;</span><br><span class="line">        latencyAddSampleIfNeeded(latency_event,duration/<span class="number">1000</span>);</span><br><span class="line">        slowlogPushEntryIfNeeded(c,c-&gt;argv,c-&gt;argc,duration);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 传播命令</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CMD_CALL_PROPAGATE &amp;&amp;</span><br><span class="line">        (c-&gt;flags &amp; CLIENT_PREVENT_PROP) != CLIENT_PREVENT_PROP)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> propagate_flags = PROPAGATE_NONE;</span><br><span class="line">        <span class="comment">// 传播命令到Slave和AOF</span></span><br><span class="line">        <span class="keyword">if</span> (dirty) propagate_flags |= (PROPAGATE_AOF|PROPAGATE_REPL);</span><br><span class="line">        <span class="comment">// 强制传播命令到Slaver和AOF</span></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;flags &amp; CLIENT_FORCE_REPL) propagate_flags |= PROPAGATE_REPL;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;flags &amp; CLIENT_FORCE_AOF) propagate_flags |= PROPAGATE_AOF;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (propagate_flags != PROPAGATE_NONE &amp;&amp; !(c-&gt;cmd-&gt;flags &amp; CMD_MODULE))</span><br><span class="line">            <span class="comment">// 传播命令</span></span><br><span class="line">            propagate(c-&gt;cmd,c-&gt;db-&gt;id,c-&gt;argv,c-&gt;argc,propagate_flags);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传播命令 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">propagate</span><span class="params">(struct redisCommand *cmd, <span class="keyword">int</span> dbid, robj **argv, <span class="keyword">int</span> argc,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 传播命令给AOF和Slaver</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_state != AOF_OFF &amp;&amp; flags &amp; PROPAGATE_AOF)</span><br><span class="line">        feedAppendOnlyFile(cmd,dbid,argv,argc);</span><br><span class="line">    <span class="keyword">if</span> (flags &amp; PROPAGATE_REPL)</span><br><span class="line">        replicationFeedSlaves(server.slaves,dbid,argv,argc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写入</strong></p><p><img src="/images/redis-ae-7.png" alt=""></p><p><code>addReply</code>是用于给客户端返回执行结果，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 请求返回 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addReply</span><span class="params">(client *c, robj *obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否需要给客户端返回数据</span></span><br><span class="line">    <span class="keyword">if</span> (prepareClientToWrite(c) != C_OK) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sdsEncodedObject(obj)) &#123;</span><br><span class="line">        <span class="comment">// 尝试写入响应Buffer，Buffer无法存储的话写入响应链表</span></span><br><span class="line">        <span class="keyword">if</span> (_addReplyToBuffer(c,obj-&gt;ptr,sdslen(obj-&gt;ptr)) != C_OK)</span><br><span class="line">            _addReplyStringToList(c,obj-&gt;ptr,sdslen(obj-&gt;ptr));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否需要给客户端返回数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prepareClientToWrite</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 过滤lua脚本</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;flags &amp; (CLIENT_LUA|CLIENT_MODULE)) <span class="keyword">return</span> C_OK;</span><br><span class="line">    <span class="comment">// 过滤不需要返回</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;flags &amp; (CLIENT_REPLY_OFF|CLIENT_REPLY_SKIP)) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    <span class="comment">// 过滤主线程</span></span><br><span class="line">    <span class="keyword">if</span> ((c-&gt;flags &amp; CLIENT_MASTER) &amp;&amp;</span><br><span class="line">        !(c-&gt;flags &amp; CLIENT_MASTER_FORCE_REPLY)) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* client加入回写队列*/</span></span><br><span class="line">    <span class="keyword">if</span> (!clientHasPendingReplies(c)) clientInstallWriteHandler(c);</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clientInstallWriteHandler</code>是客户端回写处理器，它仅会把<code>写入命令缓存到写入队列</code>中，并<code>不会直接返回结果</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把客户端加入等待回写队列 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clientInstallWriteHandler</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    c-&gt;flags |= CLIENT_PENDING_WRITE;</span><br><span class="line">    <span class="comment">// 加入到等待回写队列</span></span><br><span class="line">    listAddNodeHead(server.clients_pending_write,c);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，Redis内部对客户端的请求处理完毕，还没有发现哪里完成了最后结果的写入。</p><blockquote><p>再回头看一下<code>beforeSleep</code>到底做了什么？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 每次循环一次执行一次 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeSleep</span><span class="params">(struct aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// flush到AOF</span></span><br><span class="line">    flushAppendOnlyFile(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 处理等待回写的客户端</span></span><br><span class="line">    handleClientsWithPendingWrites();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于处理等待回复的客户端 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">handleClientsWithPendingWrites</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 循环遍历回写队列</span></span><br><span class="line">    listRewind(server.clients_pending_write,&amp;li);</span><br><span class="line">    <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</span><br><span class="line">        <span class="comment">// 获取并移除客户端</span></span><br><span class="line">        client *c = listNodeValue(ln);</span><br><span class="line">        c-&gt;flags &amp;= ~CLIENT_PENDING_WRITE;</span><br><span class="line">        listDelNode(server.clients_pending_write,ln);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 尝试向客户端回写数据</span></span><br><span class="line">        <span class="keyword">if</span> (writeToClient(c-&gt;fd,c,<span class="number">0</span>) == C_ERR) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 如果未完成回写数据，则注册异步回写事件</span></span><br><span class="line">        <span class="keyword">if</span> (clientHasPendingReplies(c)) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 创建写入事件</span></span><br><span class="line">            <span class="keyword">if</span> (aeCreateFileEvent(server.el, c-&gt;fd, ae_flags,</span><br><span class="line">                <span class="comment">/* 回写客户端处理器 */</span></span><br><span class="line">                sendReplyToClient, c) == AE_ERR)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回写客户端处理器 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendReplyToClient</span><span class="params">(aeEventLoop *el, <span class="keyword">int</span> fd, <span class="keyword">void</span> *privdata, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* 尝试向客户端回写数据 */</span></span><br><span class="line">    writeToClient(fd,privdata,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/redis-ae-8.png" alt=""></p><p><code>writeToClient</code>是用于回写数据的处理函数，回写数据位于<code>client-&gt;bufpos</code>与<code>client-&gt;reply</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回写数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writeToClient</span><span class="params">(<span class="keyword">int</span> fd, client *c, <span class="keyword">int</span> handler_installed)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 循环读取并回写数据</span></span><br><span class="line">    <span class="keyword">while</span>(clientHasPendingReplies(c)) &#123;</span><br><span class="line">        <span class="comment">// 1. 检查缓冲区并回写</span></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;bufpos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用socket.write来写入数据</span></span><br><span class="line">            nwritten = write(fd,c-&gt;buf+c-&gt;sentlen,c-&gt;bufpos-c-&gt;sentlen);</span><br><span class="line">            ...</span><br><span class="line">        <span class="comment">// 2. 检查reply并回写</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o = listNodeValue(listFirst(c-&gt;reply));</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 同上，写入数据</span></span><br><span class="line">            nwritten = write(fd, o-&gt;buf + c-&gt;sentlen, objlen - c-&gt;sentlen);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前节点写入完成后删除</span></span><br><span class="line">            <span class="keyword">if</span> (c-&gt;sentlen == objlen) &#123;</span><br><span class="line">                c-&gt;reply_bytes -= o-&gt;size;</span><br><span class="line">                listDelNode(c-&gt;reply,listFirst(c-&gt;reply));</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当回写字节数超过限制，则暂停回写退出（注册回写事件异步触发）</span></span><br><span class="line">        <span class="keyword">if</span> (totwritten &gt; NET_MAX_WRITES_PER_EVENT &amp;&amp;</span><br><span class="line">            (server.maxmemory == <span class="number">0</span> ||</span><br><span class="line">             zmalloc_used_memory() &lt; server.maxmemory) &amp;&amp;</span><br><span class="line">            !(c-&gt;flags &amp; CLIENT_SLAVE)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看下afterloop到底做了什么，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterSleep</span><span class="params">(struct aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    UNUSED(eventLoop);</span><br><span class="line">    <span class="comment">// 如果存在模块，则加全局锁</span></span><br><span class="line">    <span class="keyword">if</span> (moduleCount()) moduleAcquireGIL();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moduleAcquireGIL</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;moduleGIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加全局锁的目的是<code>为了避免模块与Redis框架并发读写数据的问题</code>。</p><blockquote><p><code>call</code>命令会自动调用<code>addReply</code>进行数据的回写，</p></blockquote><p>以<code>set</code>命令为例，对应的函数为<code>setGenericCommand</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGenericCommand</span><span class="params">(redisClient *c, <span class="keyword">int</span> flags, robj *key,</span></span></span><br><span class="line"><span class="function"><span class="params">        robj *val, robj *expire, <span class="keyword">int</span> unit, robj *ok_reply,</span></span></span><br><span class="line"><span class="function"><span class="params">        robj *abort_reply)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//将键值关联到数据库</span></span><br><span class="line">    setKey(c-&gt;db,key,val);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 回写结果</span></span><br><span class="line">    addReply(c, ok_reply ? ok_reply : shared.ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AE事件驱动是Redis高性能实现的基础。&lt;/p&gt;
    
    </summary>
    
      <category term="中间件" scheme="http://simyy.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="缓存" scheme="http://simyy.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Redis" scheme="http://simyy.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计的理解与实践</title>
    <link href="http://simyy.cn/2020/05/30/domain-driven-design/"/>
    <id>http://simyy.cn/2020/05/30/domain-driven-design/</id>
    <published>2020-05-30T14:33:56.000Z</published>
    <updated>2020-05-30T14:56:10.414Z</updated>
    
    <content type="html"><![CDATA[<p>记录领域驱动设计的理解与实践。</p><a id="more"></a><h3 id="DDD-amp-架构"><a href="#DDD-amp-架构" class="headerlink" title="DDD &amp; 架构"></a>DDD &amp; 架构</h3><p><code>DDD（Domain Driven Design，领域驱动设计）</code>是基于业务领域实现的一种软件架构方法。</p><blockquote><p><code>DDD</code>的作用是将<code>业务架构</code>转变为<code>系统架构和技术架构</code>。</p></blockquote><p>按照架构角度的不同，可分为如下三类：</p><ul><li><code>业务架构</code>：业务视角，描述业务模块以及关系；</li></ul><p>业务架构的原型往往是业务方最先提出的，包含大体的业务需求。</p><p>完整的业务架构图是由业务、产品、技术在不断的需求迭代与架构演进不断完善的。</p><p><img src="/images/domain-driven-design-01.png" alt=""></p><ul><li><code>应用架构</code>：应用（系统）视角，描述应用系统及其依赖关系；</li></ul><p>应用架构图是架构演进的结果。</p><p>随着业务的发展，会带来组织划分与应用拆分，应用架构也在不断演进。</p><p><img src="/images/domain-driven-design-02.png" alt=""></p><ul><li><code>技术架构</code>：技术视角，描述应用技术选型及其功能作用。</li></ul><p>技术架构是当前系统（应用）的技术细节的描述，包括技术选型以及其应用场景。</p><p>技术架构是面向技术人员的，用于了解软件设计的细节。</p><p><img src="/images/domain-driven-design-03.png" alt=""></p><h3 id="Domain-Driven-Design"><a href="#Domain-Driven-Design" class="headerlink" title="Domain Driven Design"></a>Domain Driven Design</h3><p>开发视角的转变：从单纯的<code>技术视角</code>转变为<code>业务视角</code>。</p><p>开发人员往往从技术角度来剖析需求，大部分情况缺少从业务角度的全局思考，对业务与架构的演进缺少前瞻性导致架构的局限性。</p><blockquote><p>尤其在业务开展的初级，开发人员对业务理解不够深入。</p></blockquote><h4 id="领域专家"><a href="#领域专家" class="headerlink" title="领域专家"></a>领域专家</h4><p><code>领域专家</code>是指那些掌握领域内知识的人，对该领域有很深入的理解。</p><p><code>产品</code>、<code>技术</code>、<code>业务</code>都可以是领域专家，其中，<code>业务</code>一般掌握着最真实的领域知识。</p><p>与<code>领域专家</code>沟通学习是架构设计的基础，无论是产品、技术、架构师，都需要与领域专家深入的学习领域知识。</p><h4 id="通用语言"><a href="#通用语言" class="headerlink" title="通用语言"></a>通用语言</h4><p>由于领域专家并不一定是产品、技术，因此与领域专家的沟通必然存在一定问题（行业不同）。</p><p><code>通用语言</code>是解决领域专家与产品开发沟通的关键。</p><blockquote><p>让大家都能听懂的专业名词，例如，SPU是商品，SKU是某种规格的商品。</p></blockquote><h4 id="领域建模"><a href="#领域建模" class="headerlink" title="领域建模"></a>领域建模</h4><p>基于通用语言，与领域专家沟通学习领域知识，抽象出一套领域知识模型。</p><h5 id="领域-amp-限界上下文"><a href="#领域-amp-限界上下文" class="headerlink" title="领域 &amp; 限界上下文"></a>领域 &amp; 限界上下文</h5><p><code>限界上下文</code>是领域的边界，也是领域模型的边界。</p><blockquote><p><code>康威定律</code>可以作为领域划分的一种规则。</p><p>组织与领域按照一一对应的关系来划分，实现领域的高内聚。</p></blockquote><p>领域内可以包含多个<code>限界上下文</code>，此时，可以划分为多个<code>细分子域</code>。</p><p><img src="/images/domain-driven-design-04.png" alt=""></p><p>根据细分子域的不同性质，又可以划分为：</p><ul><li><code>核心子域</code>：领域的核心，包含该领域内的核心领域知识；</li><li><code>支撑子域</code>：用于支撑核心子域；</li><li><code>通用子域</code>：公共的功能模块。</li></ul><p><img src="/images/domain-driven-design-05.png" alt=""></p><h5 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h5><p>领域模型需要不断演进来满足业务的迭代。</p><p>业务迭代会造成领域模型的拆分、增加，都会对原有架构产生巨大的挑战。</p><p><img src="/images/domain-driven-design-06.png" alt=""></p><h5 id="细分子域"><a href="#细分子域" class="headerlink" title="细分子域"></a>细分子域</h5><p>领域划分是从全局来考虑架构结构的划分，属于架构顶层功能模块的划分。</p><p>对于开发人员来说，<code>细分子域的领域模型的构建</code>才是软件实现的关键。</p><blockquote><p>开发人员不仅仅不要掌握细分子域，也需要了解和掌握整理领域的划分。</p></blockquote><h5 id="实体-amp-值对象"><a href="#实体-amp-值对象" class="headerlink" title="实体 &amp; 值对象"></a>实体 &amp; 值对象</h5><p><code>实体</code>是指<code>具有唯一标识</code>的对象，例如，User（实体）包含唯一的用户ID。</p><p><code>值对象</code>是指<code>不包含唯一标识</code>的对象且<code>不可修改</code>，例如，Address对于其他用户来说，只是用户的一个属性，不可修改。</p><p>实体与值对象的区别在于<code>唯一性</code>。</p><p>例如，不同规格的商品属于不同实体；规格只是一种属性，对于商品来说属于值对象。</p><h5 id="聚合-amp-聚合根"><a href="#聚合-amp-聚合根" class="headerlink" title="聚合 &amp; 聚合根"></a>聚合 &amp; 聚合根</h5><p><code>聚合</code>是指一组相关对象的集合，<code>聚合根</code>作为聚合根节点，并由<code>实体</code>与<code>值对象</code>组成。</p><p>聚合属于<code>领域内知识的子集</code>，可包含多个子域知识，用于对外提供领域服务。</p><p><img src="/images/domain-driven-design-07.png" alt=""></p><h5 id="领域模型-amp-领域事件-amp-领域服务"><a href="#领域模型-amp-领域事件-amp-领域服务" class="headerlink" title="领域模型 &amp; 领域事件 &amp; 领域服务"></a>领域模型 &amp; 领域事件 &amp; 领域服务</h5><p><code>领域模型</code>是指<code>领域知识的抽象描述</code>，用于指导软件架构设计。</p><p><code>领域事件</code>是指<code>领域内发生事件的描述</code>，用于驱动关联领域的变更，可采用发布订阅模式实现。</p><p><code>领域服务</code>是指<code>领域对外提供的查询或更新服务</code>，用于外部调用。</p><p><strong>领域建模的步骤</strong></p><ul><li>领域边界、界限上下文的划分；</li><li>确认限界上下文中的核心子域、支撑子域、通用子域；</li><li>确定子域内部的实体、值对象；</li><li>划分聚合，确定聚合根；</li><li>确认限界上下文之间的关系。</li></ul><p><strong>康威定律</strong></p><p><code>康威定律</code>是指系统结构应尽量的与组织结构保持一致。</p><p>对于多个团队来说，按照团队划分顶层领域边界；</p><p>对于团队内部来说，按照小组来划分细分子域的边界。</p><h5 id="架构分类"><a href="#架构分类" class="headerlink" title="架构分类"></a>架构分类</h5><p>软件架构上一般包括为<code>CQRS</code>、<code>六边形架构（适配器架构）</code>、<code>分层架构</code>。</p><p><strong>CQRS</strong></p><p><code>CQRS</code>被称为<code>命令和查询责任分离</code>，通过拆分读写模型来实现避免资源竞争。</p><p>CQRS按照<code>读写</code>把模型拆分为：</p><ul><li><code>命令 - 领域模型</code>：用于持久化，包括领域行为，结构相对简单，事务支持；</li><li><code>查询 - 视图模型</code>：用于展示，属于非规范的模型，不包括领域行为；</li><li><code>通知 - 领域事件</code>：用于发布领域变更事件，包含领域行为。</li></ul><p><strong>六边形架构（适配器架构）</strong></p><p><code>六边形架构（适配器架构）</code>是基于适配器的设计模式的架构模型，</p><p>其主要特性如下：</p><ul><li>利用<code>依赖倒置</code>原则来分离技术框架</li><li>功能模块均采用<code>接口来实现相互依赖</code></li><li>用<code>防腐层与适配器</code>来实现外部技术框架的依赖</li></ul><p>六边形架构屏蔽了外部技术框架的细节，<code>内部功能高内聚，外部依赖低耦合</code>。</p><p><strong>分层架构</strong></p><p><code>分层架构</code>是最常见的架构模型，按照功能层级拆分为：</p><ul><li><code>用户层</code>：聚合多个顶层领域的数据，用于用户展示；</li><li><code>应用层</code>：聚合多个细分子域的数据，用于对外提供服务；</li><li><code>领域层</code>：细分子域的领域模型，可发布领域事件、执行领域行为，包括实体阈值对象的定义；</li><li><code>基础设施层</code>：提供持久化、防腐层等基础中间件的功能。</li></ul><p><img src="/images/domain-driven-design-08.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录领域驱动设计的理解与实践。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="领域建模" scheme="http://simyy.cn/tags/%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="DDD" scheme="http://simyy.cn/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>架构设计与演进</title>
    <link href="http://simyy.cn/2020/05/27/architecture-evolution/"/>
    <id>http://simyy.cn/2020/05/27/architecture-evolution/</id>
    <published>2020-05-27T11:37:57.000Z</published>
    <updated>2020-05-27T06:41:29.492Z</updated>
    
    <content type="html"><![CDATA[<p>架构设计与演进的思考。</p><a id="more"></a><h6 id="架构到底是什么"><a href="#架构到底是什么" class="headerlink" title="架构到底是什么"></a>架构到底是什么</h6><p>架构也被称为<code>软件架构</code>，是<code>软件结构的抽象描述</code>。</p><p>架构是由<code>架构元素</code>与<code>元素之间的关系</code>组成，<code>元素的划分、选型、交互</code>是架构的关键。</p><blockquote><p>架构元素：组件/服务的划分与技术选型。<br>元素之间的关系：组件/服务之间的关联关系与交互方式。</p></blockquote><h6 id="架构的目标"><a href="#架构的目标" class="headerlink" title="架构的目标"></a>架构的目标</h6><p>架构的目标是<code>解决利益相关者的关注点</code>（<a href="https://www.infoq.cn/article/every-architect-should-study-conway-law" target="_blank" rel="noopener">参考</a>）。</p><blockquote><p><code>利益相关者</code>是与当前架构有之间或间接关系的人，也就是当前架构的目标用户，例如，业务方、产品、开发、测试等等。<br><code>关注点</code>是<code>利益相关者</code>对于当前软件的认知及痛点。</p></blockquote><p>解决不仅仅是解决当前的问题，还要有<code>前瞻性（对未来业务变化的考量</code>）。</p><p>这也就是保证架构的可迭代、可演进。</p><blockquote><p><code>架构是有生命的</code>。</p></blockquote><p>好的架构生命周期很长，支持业务的快速迭代，不断演进、进化，</p><p>相反，不好的架构没办法支持业务的迭代，不得不得对架构进行重构、重写。</p><h6 id="架构的基础"><a href="#架构的基础" class="headerlink" title="架构的基础"></a>架构的基础</h6><p><strong>领域建模</strong></p><blockquote><p><code>好的架构离不开好的领域建模</code>。</p></blockquote><p><code>领域建模</code>是架构设计的基础，它确保了架构设计的边界。</p><p>通过领域建模将领域知识转化为软件架构，这里离不开<code>领域专家</code>的配合。</p><blockquote><p>架构不是凭空想象的，是基于<code>对领域知识（领域专家提供）建模</code>的基础之上来设计的。</p></blockquote><p>对于大部分人来说，当提及领域建模时往往觉得时高大上、遥不可及的事情，事实并非如此。</p><p>领域建模是业务高度抽象的产物，范围可大可小，但需要建模者充分理解并调研领域知识。</p><blockquote><p>对领域知识理解不足，造成的建模不准确？</p><p>不要怕，最好的建模通过演进实现的，试错修正、试错优化。</p></blockquote><p><strong>真正的需求</strong></p><p>架构设计的目标是<code>通过构建合理的元素关系来满足用户的需求</code>。</p><p>由于视角的不同，利益相关者的关注点可能各不相同。</p><p>那么，好的架构一定是基于以下两点：</p><p>① 发现所有直接或间接的利益相关者；<br>② 沟通与理解利益相关者的关注点。</p><p><code>尽可能收集利益相关者的关注点</code>作为架构设计的基础。</p><p><code>如何把关注点转换为领域知识</code>是架构设计的必经之路。</p><p><strong>最小化利益冲突</strong></p><p>在沟通过程中，利益关注者之间往往会出现利益冲突的情况。</p><p>如何最小化或避免利益冲突也属于架构设计的一部分。</p><p>好的架构是<code>基于充分的调研与思考，保持利益相关者之间的利益平衡</code>。</p><blockquote><p><code>大中台小前台</code>的架构设计上是存在<code>业务方与技术方的利益冲突</code>。</p><p>前台业务方考虑的是<code>快速迭代试错</code>，而中台技术方考虑的是<code>平台的稳定性与通用性</code>。</p></blockquote><h6 id="合理架构与过渡设计"><a href="#合理架构与过渡设计" class="headerlink" title="合理架构与过渡设计"></a>合理架构与过渡设计</h6><p>什么是<code>合理架构</code>？</p><p>① 满足<code>大多数利益相关者的关注点</code>（功能点）；</p><blockquote><p>大多数意味着存在取舍，<code>合理的取舍</code>也是架构设计的一部分。</p></blockquote><p>② <code>最少的开发成本、最快的上线速度</code>，满足业务方快速迭代试错；</p><blockquote><p>快与质量差没有任何关系，<code>不要以快为不合格的架构设计而找理由</code>。</p></blockquote><p>③ 可<code>持续演进</code>的架构，需要经得起业务的不断演进。</p><p><code>刚好够用且可持续优化</code>即为合理，一切不以现状为基础的设计均属于<code>过渡设计</code>。</p><blockquote><p>开发人员，往往会把追求极致挂在嘴边，但是，<code>追求极致</code>实际上也是一种过渡设计。<br>追求极致必然会增加功能的复杂度，无论是人力成本还是时间成本都是无法容忍的。</p></blockquote><p>架构设计需要<code>从公司当前的业务、人员、成本等多方面考虑</code>，避免吹毛求疵、过渡设计。</p><blockquote><p><code>&quot;技术债&quot;</code>这个词很流行，但不是所有的技术债都是无法避免的。</p><p>架构的演进伴随着技术债的填补，也伴随着新的技术债的产生，但要<code>时刻警惕非必要技术债的产生</code>。</p></blockquote><h6 id="理想架构与架构演进"><a href="#理想架构与架构演进" class="headerlink" title="理想架构与架构演进"></a>理想架构与架构演进</h6><blockquote><p><code>没有理想的架构，只有最合适的架构</code>。</p></blockquote><p>无论哪个公司都会经历<code>从简到繁的架构演变</code>的过程。</p><p><code>架构的演进</code>是建立在合理架构的基础之上。</p><blockquote><p><a href="/2019/12/21/solid-priciple/">SOLID设计原则</a>主要用于解决如何构建可持续性的软件架构。</p></blockquote><p>架构的演进不仅包含<code>业务逻辑上的演进</code>，也包括<code>领域模型的演进</code>。</p><p><code>业务逻辑上的演进</code>是指随着需求的不断迭代对原有业务逻辑的影响。</p><p><code>领域模型的演进</code>是指随着需求的不断迭代对原有领域模型有了更加清晰的定义，它是构建<code>可持续演进架构</code>的基础。</p><p>架构设计的关键问题是<code>划清边界</code>，而架构演进的关键问题是<code>领域模型的不断演进</code>。</p><p><strong>领域演进</strong></p><p>随着业务的演进，领域模型会面临拆分的问题，同时也会产生各个细分领域的领域专家。</p><p><code>细分领域的领域专家</code>是细分领域建模的关键，也是细分领域架构设计的关键。</p><p>与此同时，架构也会面临一次拆分，不同的细分领域负责各自的架构设计，架构设计更加聚焦，这也是架构演进的必然结果。</p><h6 id="架构闭环与优化"><a href="#架构闭环与优化" class="headerlink" title="架构闭环与优化"></a>架构闭环与优化</h6><p><code>闭环</code>是指拥有一套完整的反馈机制，<code>架构闭环</code>是指拥有一套完整的系统监控与预警机制。</p><p>架构演进包括两部分：<code>性能演进</code>与<code>逻辑演进</code>。</p><blockquote><p>逻辑演进与性能演进是不和分割的。</p><p>逻辑的演进会推动性能的演进，性能演进是为了保证逻辑的演进。</p></blockquote><p>架构闭环是性能演进的必要条件。</p><p>评估架构性能瓶颈、监测系统运行情况是<code>性能演进</code>的关键。</p><h6 id="架构与组织"><a href="#架构与组织" class="headerlink" title="架构与组织"></a>架构与组织</h6><blockquote><p><code>康伟定律</code>：架构与组织是一一对应的关系。</p></blockquote><p>好的架构是<code>依赖优秀的人来实现的</code>，而优秀的人是<code>依赖好的文化来吸引的</code>。</p><hr><p>公司中总能听到一些提效的要素，例如，工具、技术、流程。</p><blockquote><p>我们要使用最先进的工具；<br>我们要使用最牛逼的技术；<br>我们要推广最高效的流程。</p><p>真的是这样吗？</p></blockquote><hr><p>架构设计时需要考虑架构维护成本，一般需要按照组织来拆解架构（组织 : 架构 = 1 : 1）。</p><p>按组织拆解架构的好处在于<code>架构的高内聚</code>，也就是说<code>以组织为单位划分架构设计与演进的职责</code>。</p><p>组织内部的架构设计更加聚焦，领域知识也更加聚焦，</p><p>从而，领域模型更加清晰，架构设计也会相对轻松（由于目标更聚焦了）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;架构设计与演进的思考。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="领域建模" scheme="http://simyy.cn/tags/%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 读写分离</title>
    <link href="http://simyy.cn/2020/05/24/mysql-replication-rw-router/"/>
    <id>http://simyy.cn/2020/05/24/mysql-replication-rw-router/</id>
    <published>2020-05-24T01:46:39.000Z</published>
    <updated>2020-05-24T02:31:16.651Z</updated>
    
    <content type="html"><![CDATA[<p>记录下读写分离的使用方式与常见问题。</p><a id="more"></a><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><p><code>读写分离</code>是通过<code>分离数据库的读写操作</code>，通过横向扩展的能力来<code>提高读性能</code>。</p><p>如图所示，<code>Master</code>称为主库，仅处理数据库的<code>写操作</code>；<code>Slaver</code>称为从库，仅处理数据库的<code>读操作</code>。</p><p>读写分离的实现可划分为两类：<code>基于客户端实现</code>与<code>基于中间件实现</code>。</p><blockquote><p>与分库分表的实现思路相似。</p></blockquote><p><img src="/images/mysql-replication-rw-router-1.png" alt=""></p><p>两种实现的原理都在于<code>请求的动态路由</code>，根据<code>请求的分类&quot;读、写或事务&quot;</code>来动态的路由到指定的数据库实例。</p><p><strong>基于客户端实现</strong></p><p><code>基于客户端实现</code>是通过嵌入业务层来实现请求路由的功能，</p><p>优点是<code>性能好</code>，</p><p>缺点是<code>升级困难</code>、<code>问题排查难</code>、<code>客户端复杂</code>。</p><blockquote><p>由于路由功能完全内嵌在业务应用，日志也会分散在不同的业务应用，因此，问题的上报与排查都需要业务方深入合作。</p></blockquote><p><strong>基于中间件实现</strong></p><p><code>基于中间件实现</code>是通过<code>中间件拦截请求转发（动态路由）</code>到指定的数据库实例，</p><p>与基于客户端实现相反，</p><p>优点是<code>升级方便</code>、<code>问题排查容易</code>、<code>客户端无感知</code>，</p><p>缺点是<code>性能损耗大</code>、<code>业务方可能存在读异常</code>、<code>引入新的单点问题</code>。</p><blockquote><p>路由功能的实现与业务应用无关，中间件可以做到无感知的升级，而且由于路由日志集中在中间件，排查问题更加容易。</p></blockquote><h4 id="MySQL主从同步"><a href="#MySQL主从同步" class="headerlink" title="MySQL主从同步"></a>MySQL主从同步</h4><p><code>MySQL主从同步</code>是利用<code>同步binlog日志同步以及操作重放实现</code>的数据同步。</p><p><img src="/images/mysql-replication-rw-router-2.png" alt=""></p><blockquote><p><code>binlog</code>：MySQL数据库的二进制日志，用于记录用户对数据库<code>变更操作的SQL语句</code>。</p></blockquote><p><strong>步骤</strong>：</p><p>① 当Slaver连接到Master时，Master会为Slaver开启<code>binlog dump线程</code>；</p><blockquote><p><code>binlog dump线程</code>用于读取binlog信息同步到<code>Slaver</code>。</p></blockquote><p>② Slaver会创建<code>I/O 线程</code>以及来处理<code>binlog dump线程</code>的数据，写入<code>relay log</code>；</p><blockquote><p><code>relay log</code>是为了避免同步数据过程中的异常，导致数据的丢失，在<code>半同步复制</code>中有介绍。</p></blockquote><p>③ Slaver还会创建<code>SQL 线程</code>用来解析<code>relay log</code>重放操作写入数据，完成数据同步。</p><blockquote><p>同步过程中，<code>SQL解析执行一定是单线程的</code>，否则，会造成执行顺序错乱影响数据一致性。</p></blockquote><hr><p>主从同步是通过异步线程同步数据，属于<code>最终一致性</code>的实现方案，因此，必然<code>存在主从不一致的</code>问题。</p><p><strong>异步模式</strong></p><p><code>异步模式</code>是最基础的同步方式，必然存在延迟。</p><p>为了解决<code>异步模式</code>的延时问题，MySQL提出了下面几种方法来解决这个问题。</p><p><strong>半同步模式（semi-sync）</strong></p><p><code>半同步模式</code>是通过<code>强制写入relay log</code>来保证<code>至少有一台从库完成了数据同步</code>。</p><blockquote><p>仅保证写入<code>relay log</code>的延迟，无法保证写入数据的延迟，因此，半同步模式不能彻底解决问题。</p></blockquote><p>对于一主一从的读写分离的情况下，此方法可以使同步延迟的问题忽略不记。</p><p>但在一主多从的读写分离的情况下，此方法就不一定会生效了，可能存在某个从库没有即使同步数据。</p><p><strong>全同步模式</strong></p><p><code>全同步模式</code>是在半同步的基础之上保证全部从库同步数据。</p><blockquote><p>这里的保证是relay log的写入还是数据的写入？</p><p>仍然是relay log（I/O线程与SQL线程不应该再次通信），只要日志flush到磁盘就不会出现数据丢失的情况。</p></blockquote><p><strong>并行模式</strong></p><p><code>并行模式</code>是通过增加<code>SQL线程</code>来实现并行读取<code>relay log</code>实现<code>库级别的并行</code>。</p><h4 id="主从延迟解决方案"><a href="#主从延迟解决方案" class="headerlink" title="主从延迟解决方案"></a>主从延迟解决方案</h4><p><strong>背景</strong></p><p>并发写入数据可能造成主从延迟增大。</p><p><strong>解决</strong></p><p>① 增加<code>数据缓存</code>，更新数据的同时写入缓存（读全部从缓存取数据）。</p><p>② 开启<code>半同步、同步复制</code>，降低时延问题，但会影响写入性能。</p><p>③ 强制<code>路由到主库</code>。</p><p>④ 优化业务逻辑，对于异步操作通过使用<code>延迟队列</code>、<code>重试</code>的机制来解决延迟问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下读写分离的使用方式与常见问题。&lt;/p&gt;
    
    </summary>
    
      <category term="中间件" scheme="http://simyy.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="MySQL" scheme="http://simyy.cn/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://simyy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="读写分离" scheme="http://simyy.cn/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java GC 调优</title>
    <link href="http://simyy.cn/2020/05/21/java-gc-optimize/"/>
    <id>http://simyy.cn/2020/05/21/java-gc-optimize/</id>
    <published>2020-05-21T12:21:32.000Z</published>
    <updated>2020-05-26T03:12:13.786Z</updated>
    
    <content type="html"><![CDATA[<p>记录Java GC调优的相关问题。</p><a id="more"></a><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><p>常用的方式如下，</p><p><strong>第一种：</strong><code>ParNew（新生代）</code>、<code>CMS（老年代）</code></p><p><strong>第二种：</strong><code>G1（新生轻与老年代）</code></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>按照GC范围的不同，GC可分为：<code>MinorGC（YoungGC）</code>、<code>MajorGC（FullGC）</code>、<code>OldGC</code>、<code>MixedGC</code>。</p><h5 id="MinorGC"><a href="#MinorGC" class="headerlink" title="MinorGC"></a>MinorGC</h5><p><code>MinorGC</code>是<code>新生代GC</code>，在分代回收中负责堆内存年轻代的回收。</p><p><strong>触发条件</strong></p><blockquote><p>当<code>Eden区空间不足</code>就会触发<code>MinorGC</code>。</p></blockquote><p>在分代回收中，如果年轻代的空间不足会导致年轻代的垃圾回收。</p><p><strong>回收算法</strong></p><p>由于新生代的对象生命周期较短，垃圾回收也会相对频繁，因此需要考虑垃圾回收的效率。</p><p>考虑到新生代<code>朝生夕死</code>的特点，新生代采用<code>复制算法</code>，例如，<code>ParNew中仅复制存活数据到Survivor</code>。</p><p><strong>具体步骤</strong></p><p>① 扫描新生代以及老年代；</p><blockquote><p>由于存在<code>跨代引用</code>，因此需要扫描老年代。</p><p>CMS使用CardTable来记录新老代之间的跨代引用，<br>G1使用RememberSet（占堆的20%）来记录Region之间的跨代引用。</p></blockquote><p>② 复制存活对象到Survivor区，增加对象年龄；</p><blockquote><p>复制属于耗时操作，但由于<code>Eden区对象朝生夕死</code>的特点，需要复制的对象并不多。。</p></blockquote><p>③ 年龄达到阈值，晋升至老年代。</p><blockquote><p><strong>注意：</strong><code>单次MinorGC时间更多取决于GC后存活对象的数量</code>。</p></blockquote><h5 id="OldGC"><a href="#OldGC" class="headerlink" title="OldGC"></a>OldGC</h5><p><code>OldGC</code>是<code>老年代GC</code>。</p><p><code>CMS</code>属于<code>OldGC</code>，仅对分代回收中的老年代进行老几回收，一般配合<code>新生代ParNew</code>。</p><p><strong>触发条件</strong></p><p>① 手动触发<code>System.gc()</code>；</p><p>② 老年代的使用率达到阈值；</p><p><strong>回收算法</strong></p><p>由于老年代的对象生命周期较长，存活的对象比例高，因此无法使用复制算法。</p><p><code>CMS</code>采用<code>标记清除算法</code>，同样可以开启<code>内存整理</code>功能来避免内存空间碎片的问题。</p><blockquote><p>标记清除中常见的问题：<code>STW（Stop The World）</code>。</p><p><code>STW（Stop The World）</code>是为了保证标记的一致性，避免标记过程中出现遗漏的情况。</p></blockquote><blockquote><p>STW并不是必须的，但是在极端情况下，遗漏可能会导致大量的内存泄露，甚至导致宕机。</p></blockquote><p><strong>具体步骤</strong></p><p>① <code>Initial Mark</code>：从<code>GC Root</code>开始标记可达对象，触发<code>STW</code>；</p><blockquote><p>什么是<code>GC Root</code>？</p><p><strong>Local variables</strong> are kept alive by the stack of a thread.<br><strong>Active Java threads</strong> are always considered live objects and are therefore GC roots.<br><strong>Static variables</strong> are referenced by their classes.<br><strong>JNI References</strong> are Java objects that the native code has created as part of a JNI call.</p></blockquote><p>② <code>Cocurrent Mark</code>：根据①中标记的可达对象<code>并发遍历标记</code>相关联的对象状态；</p><p>③ <code>Remark</code>：重新标记在并发标记阶段发生变化的对象，触发<code>STW</code>；</p><p>④ <code>Concurrent Sweep</code>：在对象标记的基础之上，清理老年代非可达对象。</p><h5 id="MajorGC"><a href="#MajorGC" class="headerlink" title="MajorGC"></a>MajorGC</h5><p><code>MajorGC</code>是<code>FullGC</code>，不仅会触发<code>OldGC</code>，也会触发<code>YoungGC</code>。</p><blockquote><p><code>MajorGC</code>是收集整个堆内存。</p></blockquote><p><code>MajorGC</code>会自动触发<code>MinorGC</code>。</p><h5 id="MixedGC"><a href="#MixedGC" class="headerlink" title="MixedGC"></a>MixedGC</h5><p><code>MixedGC</code>是<code>新生代与老年代的混合GC</code>，它不属于<code>FullGC</code>。</p><p><code>MixedGC</code>是建立在<code>YoungGC</code>的基础之上再<code>回收部分老年代的内存</code>。</p><p><code>G1</code>属于<code>MixedGC</code>。</p><blockquote><p><code>G1</code>通过划分<code>Region</code>来实现增量回收。</p></blockquote><p><strong>触发条件</strong></p><p>当<code>E区</code>无法分配新的对象内存时会触发G1中的<code>YoungGC</code>。</p><p>当<code>使用率大于InitiatingHeapOccupancyPercent</code>会触发<code>MixedGC</code>。</p><p>当<code>Metaspace内存不足</code>时会触发<code>MixedGC</code>。</p><p><strong>回收算法</strong></p><p><code>YongGC</code>选定<code>所有年轻代Region</code>进行回收，使用<code>复制算法</code>。</p><p><code>MixedGC</code>不仅选定<code>所有年轻代Region</code>，还会根据<code>global concurrent marking</code>统计得出<code>收集后收益高的若干老年代Region</code>来选择，最终采用<code>标记清除算法</code>。</p><blockquote><p><code>G1</code>保证<code>在用户指定的开销目标范围内尽可能选择收益高的老年代Region</code>进行回收。</p><p>因此，<code>MixedGC</code>不是<code>FullGC</code>。</p></blockquote><p>当<code>MixedGC无法解决老年代内存不足</code>时，会降级为<code>SerialGC（FullGC）</code>。</p><p><strong>具体步骤</strong></p><p>① <code>Initial Mark</code>：同CMS的步骤①；</p><p>② <code>Cocurrent Mark</code>：同CMS的步骤②；</p><blockquote><p><code>SATB</code>是GC开始时活着的对象的一个快照（通过<code>Root Tracing</code>得到），用于维持并发GC的正确性。</p></blockquote><p>③ <code>Remark</code>：与CMS的区别在于<code>重新标记的范围不同</code>：G1仅需要扫描<code>SATB（snapshot-at-the-beginning, 起始快照）</code>；</p><blockquote><p><code>CMS Remark</code>的扫描范围不仅包括<code>SATB</code>，而且会扫描整个根集合。</p></blockquote><p>④ <code>Clean up/Copy</code>：在对象标记的基础之上，清理<code>新生代全部非可达</code>对象与<code>老年代部分非可达</code>对象。</p><!-- TODO R大的分析：https://hllvm-group.iteye.com/group/topic/44381#post-272188 --><h3 id="FullGC"><a href="#FullGC" class="headerlink" title="FullGC"></a>FullGC</h3><p>FullGC产生的原因有以下四种，</p><p><strong>MetaSpcae空间不足与自动扩容</strong></p><p>在Java8中，当<code>MetaSpace空间内存不足</code>时，会触发FullGC来尝试清理掉无用的内存。</p><p>为了避免这种情况，可以通过<code>增大MetaSpace空间大小</code>与<code>预设足够大的MetaSpace空间避免动态扩容</code>。</p><p><strong>CMS的promotion failed与concurrent mode failure</strong></p><p><code>MinorGC</code>时，如果<code>Survivor</code>空间不足，对象会直接进入老年代，</p><p>但由于<code>老年代有碎片或者剩余空间不足</code>导致没有足够空间存储晋升对象，就会产生<code>promotion failed</code>。</p><blockquote><p><code>promotion failed</code>会导致<code>GC降级为SerialGC（Old）</code>。</p></blockquote><p><strong><em>解决方法：</em></strong></p><p>① 增大Survivor大小；</p><blockquote><p><code>内存整理</code>属于耗时操作，会造成<code>STW</code>。</p></blockquote><p>② 设置老年代的<code>内存碎片整理</code>功能以及合理的<code>整理周期</code>。</p><hr><p><code>CMS GC</code>时，如果由于某种原因，业务线程直接在老年代内分配对象，但老年代没有足够的空间，就会产生<code>concurrent mode failure</code>。</p><blockquote><p>同样，<code>concurrent mode failure</code>会导致<code>GC降级为SerialGC（Old）</code>。</p></blockquote><p><strong><em>解决方法：</em></strong></p><p>① <code>增大老年代大小</code>，避免老年代的内存不足；</p><p>② 设置<code>老年代的合理回收阈值</code>，尽早释放内存空间，保证老年代的剩余空间大小；</p><p><strong>Young GC晋升的平均大小大于老年代的剩余空间</strong></p><p>当<code>老年代的内存空间存在内存不足的风险</code>时，会触发FullGC，如果频繁出现此类情况，需要<code>关注晋升对象大小</code>以及是<code>否存在内存泄露</code>的情况。</p><p><strong>主动触发Full GC（System.gc）</strong></p><p>应用通过调用<code>System.gc()</code>来触发<code>FullGC</code>。</p><h3 id="配置调优"><a href="#配置调优" class="headerlink" title="配置调优"></a>配置调优</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><strong>-Xms &amp; -Xmx</strong></p><p><code>-Xms</code>： 初始堆大小。</p><p><code>-Xmx</code>： 最大堆大小。</p><p>一般情况下设置为相同值，避免内存扩展。</p><p><strong>-Xmn</strong></p><p><code>-Xmn</code>： 新生代大小。</p><p>Sun官方推荐配置为<code>整个堆的3/8</code>，但是不同的业务场景应该不同。</p><blockquote><p><code>对于Web应用3/8设置并不合理</code>，原因在于：<br>每个请求的生命周期较小，尤其对于高并发的场景下，大量的并发会导致新生代快速填满；<br>由于新生代内存不足，请求对象直接进入老年代，这部分对象并不会被MinorGC清理，从而造成内存空间的浪费。</p></blockquote><p>① 增大Eden增大触发间隔：</p><ul><li>[Eden <em> 2] 会影响 [Minor GC间隔 </em> 2]:</li><li>内存空间增大一倍，空间被占满的时间也会同步增大一倍。</li></ul><p>② 增大Eden对单次MinorGC时间的影响不大：</p><ul><li>[Eden * 2] 会增加新生代扫描与复制的时间；</li><li>扫描时间占比很小（并发扫描），对MinorGC影响不大；</li></ul><blockquote><p>复制是一个耗时的操作，但Eden区由于对象的生命周期较小，需要复制的对象也不会增加太多。</p></blockquote><ul><li>由于堆中短期对象很多，不需要额外复制一倍的空间；</li></ul><blockquote><p>因此，<code>增加Eden区大小可以提高新生代内存回收（MinorGC）的效率</code>。</p></blockquote><p><strong>-XX:MetaspaceSize &amp; -XX:MaxMetaspaceSize</strong></p><p>该用于设置元空间的大小，存在<code>内存不足</code>与<code>自动扩容</code>的情况，可能造成<code>MajorGC</code>。</p><p>64位JVM默认20M，最大值为宿主机内存大小。</p><h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><p><strong>-CMSScavengeBeforeRemark</strong></p><p>该配置时用来保证<code>Remark前强制进行一次MinorGC</code>，从而<code>减少Remark的时间</code>。</p><blockquote><p>考虑到新生代对象的生命周期很短，在<code>触发CMS之前强制JVM执行一次Minor GC</code>，清理掉无效的对象，<code>避免大范围的Remark</code>。</p></blockquote><p><strong>-XX:UseCMSCompactAtFullCollection  &amp; -XX:CMSFullGCBeforeCompaction</strong></p><p>该配置是用于解决<code>promotion failed</code>，</p><p>分别为<code>开启开启CMS GC的内存整理功能</code>和<code>设置CMS GC的内存整理频次</code>，</p><p>从而减少内存碎片造成的内存不足。</p><p><strong>-XX:CMSInitiatingOccupancyFraction &amp; -XX:+UseCMSInitiatingOccupancyOnly</strong></p><p>该配置是用于解决<code>cocurrent mode failed</code>，</p><p>分别为<code>设定CMS在对内存占用率达到X%的时候开始GC</code>和<code>设置JVM回收阈值（不基于运行时收集的数据来启动CMS垃圾收集周期）</code>，</p><p>从而避免垃圾回收不及时造成的内存不足。</p><h4 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h4><p><strong>-XX:NewRatio</strong></p><p>该配置是用来<code>设置新生代与老年代的比例</code>（默认2）。</p><p>调整新生代的大小可避免大量短生命周期对象进入老年代。</p><p><strong>-XX:MaxGCPauseMillis=n</strong></p><p>该配置是用来<code>设置最大GC停顿时间的目标</code>，主要是为了<code>降低STW对应用的影响</code>。</p><p>虽然设置了最大GC停顿时间，但这只是JVM自动回收优化的目标，不保证每次都会低于该配置的值。</p><p><strong>-XX:G1ReservePercent</strong></p><p>该配置是用来<code>设置堆内存保留空间的大小</code>，用以<code>降低Eden晋升失败</code>的可能性。</p><p>当对内存空间大小达到堆内存预留值会触发MixedGC。</p><p><strong>-XX:G1HeapRegionSize</strong></p><p>该配置是用来<code>设置堆Region的大小</code>，默认1~32。</p><p>在特殊的业务场景下可能存在小生命周期的大对象的产生，可以通过此设置<code>优化Region大小解决大对象直接进入老年代的问题</code>。</p><p><a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html" target="_blank" rel="noopener">美团的案例</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html" target="_blank" rel="noopener">美团的案例</a><br><a href="https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/" target="_blank" rel="noopener">https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/</a><br><a href="https://hllvm-group.iteye.com/group/topic/44381#post-272188" target="_blank" rel="noopener">https://hllvm-group.iteye.com/group/topic/44381#post-272188</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Java GC调优的相关问题。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机原理" scheme="http://simyy.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
      <category term="垃圾回收" scheme="http://simyy.cn/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="调优" scheme="http://simyy.cn/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM在64位系统上的指针压缩</title>
    <link href="http://simyy.cn/2020/05/14/java-64bit-jvm-compressed-pointer/"/>
    <id>http://simyy.cn/2020/05/14/java-64bit-jvm-compressed-pointer/</id>
    <published>2020-05-14T00:19:23.000Z</published>
    <updated>2020-05-14T02:30:25.516Z</updated>
    
    <content type="html"><![CDATA[<p>记录下JVM在64位系统上的指针压缩。</p><a id="more"></a><p><code>寻址能力不同</code>是32位与64位操作系统的不同之处。</p><p><code>32位</code>操作系统最大支持<code>4G内存（2^32）</code>，而<code>64位</code>操作系理论上最大支持<code>16384PB（2^64）</code>。</p><p><strong>指针占用字节的不同：</strong></p><ul><li>64位JVM占用8个字节</li><li>32位JVM占用4个字节</li></ul><p>同样的指针加载，64位JVM会占用更多的内存，也就是所谓的<code>&quot;64位JVM是32位JVM内存消耗的1.5位&quot;</code>。</p><p><strong>CompressedOops与UseCompressedClassPointers</strong></p><p><code>CompressedOops与UseCompressedClassPointers</code>是用来压缩空间的，用于解决JVM在32位与64位操作系统上内存占用问题。</p><p><code>CompressedOops</code>是指开启普通对象指针的压缩（Ordinary Object Pointer），用于提高堆的使用效率。</p><p><code>UseCompressedClassPointers</code>是指开启类指针压缩。</p><p><code>堆内存在&quot;4G~32G&quot;</code>的范围内，可使用指针压缩技术来提高堆内存的使用效率。</p><hr><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="keyword">int</span> a; &#125;</span><br><span class="line"></span><br><span class="line">`A a = <span class="keyword">new</span> A()`,</span><br></pre></td></tr></table></figure><blockquote><p>HotSpot的对齐方式为<code>8字节对齐</code>:</p><p>对象内存 = 对象头 + 实例数据 + padding，</p><p>其中 0 &lt;= padding &lt; 8。</p></blockquote><p>64位系统的JVM默认（未开启指针压缩）情况下，<code>指针a（引用）</code>占用8个字节，<code>对应的对象</code>占用24个字节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24(对象内存, 8字节对齐) = 16（对象头） + 4（int a）+ 4 (padding 补位对齐)</span><br></pre></td></tr></table></figure><p>64位系统的JVM默认（开启指针压缩）情况下，<code>指针a（引用）</code>占用4个字节，<code>对应的对象</code>占用16个字节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16(对象内存, 8字节对齐) = 12（对象头） + 4（int a）+ 0 (padding 补位对齐)</span><br></pre></td></tr></table></figure><hr><p><code>CompressedOops</code>与<code>UseCompressedClassPointers</code>必须同时使用（默认开启），否则无法生效。</p><p>Java8默认开启了这个配置，在没有配置<code>MetaspaceSize</code>的情况下，会自动申请<code>1G</code>大小的<code>CompressedClassSpaceSize</code>。</p><blockquote><p><code>MetaSpace</code>用来存储<code>klass（JVM中class的运行时数据结构）</code>的。</p></blockquote><p>无论如何配置，<code>CompressedClassSpaceSize</code>总是小于<code>MetaspaceSize（默认为宿主机的最大内存）</code>。</p><p>开启命令如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseCompressedClassPointers</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-XX:CompressedClassSpaceSize=128m</span><br></pre></td></tr></table></figure><p>但一般我们只需要设置好MetaSpace，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=128m</span><br><span class="line">-XX:MaxMetaspaceSize=128m</span><br></pre></td></tr></table></figure><p>JVM会默认开启指针压缩，并且自动配置<code>CompressedClassSpaceSize</code>的大小。</p><p><strong>非堆内存划分</strong></p><p><code>CodeCache</code>：用于存储经过<code>JIT编译优化后的代码</code>。</p><p><code>JIT编译器（即时编译器）</code>生成<code>Hot Spot Code（热点代码）</code>，从而提高执行效率。</p><p><code>MetaSpace</code>：用于存储<code>Class在JVM中的数据结构klass</code>，包含类的所有元数据数据（方法、字节码、常量池等）。</p><p><code>CompressedClassSpace</code>：是分配在<code>MetaSpace</code>中，用于指令压缩，只包含类的部分元数据（InstansKlass/ArrayKlass等）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下JVM在64位系统上的指针压缩。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
      <category term="JVM" scheme="http://simyy.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>再谈事务与分布式事务</title>
    <link href="http://simyy.cn/2020/05/08/distributed-transaction-sequel/"/>
    <id>http://simyy.cn/2020/05/08/distributed-transaction-sequel/</id>
    <published>2020-05-08T14:25:00.000Z</published>
    <updated>2020-05-12T07:25:20.303Z</updated>
    
    <content type="html"><![CDATA[<p>时隔两年，再从新学习一下事务以及分布式事务。</p><a id="more"></a><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p><strong>什么是事务?</strong></p><p>事务是<code>恢复和并发控制</code>的基本单位。</p><h5 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h5><ul><li><code>Atomic（原子性）</code>：事务内操作要么全成功要么全失败；</li><li><code>Consistent（一致性）</code>：事务完成后所有数据的状态都是一致的（均发生变更）；</li><li><code>Isolation（隔离性）</code>：事务之间互不影响；</li><li><code>Duration（持久性）</code>：事务的修改被持久化保存。</li></ul><p><strong>原子性</strong></p><blockquote><p>原子是化学中不可再分的最小单位。</p></blockquote><p>事务中的原子性可以理解为事务操作的不可拆分，</p><p>也就是说，同一个事务内部的所有操作不可拆分，要么全部执行成功，要么全部执行失败。</p><p>原子性的另外一层含义是<code>事务内的操作可回滚</code>，也就是存在部分执行失败的情况下恢复数据。</p><p><strong>隔离性</strong></p><p>隔离是用于解决事务并发的资源竞争问题。</p><p><code>锁</code>是用来解决隔离的唯一手段，可分为<code>悲观锁</code>和<code>乐观锁</code>。</p><ul><li>悲观锁：对事务对象加锁，实现顺序执行（Serializable隔离级别属于这种情况）；</li><li>乐观锁：基于多版本冲突检测，实现并发执行；</li></ul><p>多版本数据隔离的实现又可划分：<code>基于物理存储的实现</code>与<code>基于内存存储的实现</code>，</p><ul><li>基于物理存储：多版本数据更新写入磁盘（持久化），支持异常恢复；</li><li>基于内存存储：多版本数据更新仅存储在内存，性能好，异常无法恢复。</li></ul><blockquote><p><code>Undo Log</code>是MySQL事务隔离性的关键。</p></blockquote><p><strong>持久化</strong></p><p>持久化是数据一致性的最终保证。</p><p>数据库的持久化存在两层含义：<code>数据落盘</code>与<code>数据备份</code>。</p><ul><li>数据落盘：事务变更写入磁盘存储；</li><li>数据备份：事务变更不仅进入本地磁盘存储，同时同步到数据库的副本；</li></ul><p>数据落盘一般会包含两个阶段：<code>写入缓存</code>与<code>写入磁盘</code>，</p><blockquote><p>缓存的使用可以带来性能的提高，但也会带来数据丢失的风险。</p></blockquote><p><strong>一致性</strong></p><p>没有解决事务操作的原子性，就无法实现事务数据变更的一致性；</p><p>没有解决事务并发执行的问题，就无法实现事务操作的隔离，也无法实现事务数据变更的一致性；</p><p>没有合理的持久化策略，即使保证了原子性，但没有写入磁盘或无法从异常中恢复，也无法实现事务数据变更的一致性；</p><p>因此，<code>原子性</code>、<code>隔离性</code>与<code>持久化</code>是实现一致性的基础。</p><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><ul><li><code>脏读</code>：读取到未提交的数据。</li><li><code>不可重复度</code>：数据的修改。</li><li><code>幻读</code>：数据的增加。</li></ul><p>数据库事务的<code>隔离级别</code>分为4种，由低到高分别为</p><ul><li><code>Read uncommitted（读未提交）</code>，存在问题：<code>脏读、不可重复读、幻读</code>；</li><li><code>Read committed（读已提交）</code> ，存在问题：<code>不可重复读、幻读</code>；</li><li><code>Repeatable read（可重复读）</code>，存在问题：<code>幻读</code>；</li><li><code>Serializable（序列化）</code></li></ul><blockquote><p>在<code>Read committed</code>与<code>Repeatable read</code>隔离级别下，MySQL的InnoDB使用MVCC来解决<code>不可重复读</code>、<code>幻读</code>的问题。</p></blockquote><h5 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h5><p>事务按照<code>一致性的强弱</code>可以划分为：<code>传统事务</code>和<code>柔性事务</code>，</p><p><code>柔性事务</code>允许系统存在中间状态，这个中间状态又不会影响系统整体可用性。</p><p><code>柔性事务</code>的实现方式包括：<code>记录日志+补偿</code>、<code>消息（多次重试，需要幂等处理）</code>、<code>CAS（乐观锁）不断重试</code>。</p><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p><code>分布式事务</code>是指事务的参与者位于分布式系统的不同节点。</p><p>分布式事务主要的关注点在于<code>一致性（分布式系统中不同节点的状态同步）</code>。</p><p><code>原子性</code>、<code>隔离性</code>、<code>持久性</code>是由分布式系统中不同的事务参与节点来保证。</p><p><strong><em>实现方式有</em></strong>：</p><ul><li><code>2PC（两阶段提交）</code></li><li><code>3PC（三阶段提交）</code></li><li><code>TCC（Try Confirm Cancel、补偿事务）</code></li><li><code>本地消息表（BASE）</code></li><li><code>事务消息（BASE）</code>。</li></ul><h5 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h5><p><code>XA</code>是由X/Open组织提出的<code>分布式事务规范</code>，是实现<code>2PC</code>与<code>3PC</code>的基础。</p><p><strong><em>组成</em></strong>：</p><ul><li><code>事务管理器（TM）</code>：分布式事务的协调者，负责各个资源管理器的本地事务的提交与回滚；</li><li><code>资源管理器（RM）</code>：分布式事务的参与者，管理参与者本地事务资源。</li></ul><h5 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h5><p><code>2PC（两阶段提交）</code>是通过<code>事务执行</code>与<code>事务提交</code>两个阶段来实现分布式事务。</p><p><code>2PC</code>中必然存在一个<code>协调者</code>，用于协调分布式系统中<code>事务的发起</code>与<code>事务提交/回滚</code>。</p><p><img src="/images/distributed_transaction_sequel_1.png" alt="2PC"></p><p><strong><em>步骤如下：</em></strong></p><ul><li><strong>阶段1（PreCommit）</strong>：<code>参与者</code>执行事务操作，并返回执行结果到<code>协调者</code>；</li><li><strong>阶段2（doCommit ）</strong>：<code>协调者</code>等待事务执行结果，如果结果均成功则<code>提交事务</code>，否则<code>回滚事务</code>（存在失败结果）。</li></ul><h6 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h6><p><strong>同步阻塞 &amp; 单点问题*</strong></p><p><code>在进入阶段2前协调者发生异常</code>，没有其他节点可以代替协调者的工作，从而造成协调者的<code>单点问题</code>，</p><p>与此同时，事务参与者由于没有协调者的下一步通知，将会一直阻塞直到协调者的恢复，从而形成<code>同步阻塞问题</code>。</p><p><strong>数据不一致</strong></p><p><code>阶段2中存在部分分布式节点执行失败</code>的情况，将会导致不同事务参与者数据不一致的情况。</p><h5 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h5><p><code>3PC（三阶段提交）</code>是通过<code>事务请求</code>、<code>事务执行</code>与<code>事务提交</code>三个阶段来实现分布式事务。</p><p><img src="/images/distributed_transaction_sequel_2.png" alt="3PC"></p><p><strong><em>步骤如下：</em></strong></p><ul><li><strong>阶段1（CanCommit）</strong>：<code>询问参与者</code>是否可以事务执行，主要用于检查参与者是否异常（宕机、通信异常）；</li><li><strong>阶段2（PreCommit）</strong>：同<code>2PC</code>，但<code>协调者</code>增加<code>等待超时机制</code>，如果存在超时的参与者则<code>默认参与者执行失败</code>（触发回滚）；</li><li><strong>阶段3（doCommit ）</strong>：同<code>2PC</code>，但<code>参与者</code>增加<code>等待超时机制</code>，如果存在超时的协调者则<code>默认协调者发出提交事务</code>。</li></ul><p><strong>与<code>2PC</code>不同之处</strong></p><ul><li><code>PreCommit</code>拆分为<code>CanCommit</code>和<code>PreCommit</code>，增加一步可达性判断；</li><li><code>协调者</code>与<code>参与者</code>均增加<code>等待超时机制</code>，实现事务的回滚和自动提交，解决了<code>同步阻塞</code>与<code>单点问题</code>。</li></ul><h6 id="存在的问题-1"><a href="#存在的问题-1" class="headerlink" title="存在的问题"></a>存在的问题</h6><p><strong>数据不一致</strong></p><p>在<code>阶段3</code>中，协调者在下发<code>回滚命令</code>的过程中出现异常，部分<code>参与者发生等待超时</code>，参与者会自动提交（与协调者命令不同）。</p><h5 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h5><blockquote><p><code>BASE</code>允许系统出现短暂性不可用或不一致的状态，只要能够在一定时间范围内最终达到可用或者一致状态即可。</p></blockquote><p><code>BASE</code>是由<code>基本可用（Base Availability）</code>、<code>软状态（Soft-state）</code>和<code>最终一致性（Eventual Consistency</code>。</p><h5 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h5><p><code>TCC（Try Confirm Cancel）</code>又称<code>补偿事务</code>，是<code>2PC</code>的一种实现，</p><p>其核心思想是：<code>针对每个操作都要注册一个与其对应的确认和补偿操作</code>。</p><p><img src="/images/distributed_transaction_sequel_3.png" alt="TCC"></p><p><strong><em>步骤如下：</em></strong></p><ul><li><strong>Try</strong>： 业务检查（保证事务的一致性）、资源预留（保证事务的隔离性）；</li><li><strong>Confirm</strong>： 执行操作，执行真正的业务逻辑；</li><li><strong>Cancel</strong>： 预留资源取消。</li></ul><p><strong>TCC与XA的不同之处</strong></p><ul><li><code>锁粒度不同</code>：资源锁定具体由业务决定；</li><li><code>最终一致性</code>：通过<code>Confirm</code>与<code>Cancel</code>实现最终的一致性；</li><li><code>业务耦合严重</code>：<code>Confirm</code>、<code>Cancel</code>操作与具体业务强关联；</li></ul><p>由于<code>Confirm</code>操作属于事务提交，因此，<code>TCC</code>中一般<code>不提供回滚操作</code>。</p><p><code>Cancel</code>属于锁定资源的释放，例如，订单预占库存的释放。</p><h5 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h5><p><code>本地消息表</code>是属于<code>BASE</code>理论的一种分布式事务的实现。</p><p><code>本地消息表</code>的主要思想是将<code>分布式事务拆分成本地事务</code>进行处理，分布式之间的通过本地的<code>事务消息表</code>来异步通信来实现。</p><p><strong>特点</strong></p><ul><li><code>最终一致性</code>：通过保证<code>事务消息的写入</code>与<code>事务消息的投递消费</code>来实现；</li><li><code>业务幂等</code>：由于存在异常重试机制来保证事务的一致性，因此业务必须保证幂等；</li><li><code>异步回滚</code>：业务需要支持类似<code>TCC的Cancel</code>操作，用于处理接收到的事务回滚消息；</li><li><code>业务耦合严重</code>：与TCC相同的业务耦合情况。</li></ul><h5 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h5><p><code>事务消息</code>是<code>本地消息表</code>的一种实现，解决了业务耦合严重的问题。</p><p><code>事务消息</code>是对本地消息表的封装，构建一套完整的事务消息中间件，保证<code>消息的写入与消费</code>来实现分布式事务。</p><p><img src="/images/distributed_transaction_sequel_4.png" alt="事务消息"></p><p>例如，<code>RocketMQ</code>实现了事务消息，可用于分布式事务。</p><p><strong>特点</strong></p><ul><li><code>最终一致性</code>：同<code>本地消息表</code>；</li><li><code>业务耦合小</code>：事务消息数据独立存储于中间件中；</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>首先，分布式事务产生的原因在于<code>应用拆分（微服务）</code>。</p><p>原本本地资源管理器就可以实现的事务，被拆分到多个应用，此时为了保证位于多个应用的事务操作就会想到使用分布式事务。</p><blockquote><p>但是，真的需要分布式事务么？</p></blockquote><p>分布式事务不仅会造成资源锁定，事务操作链路长，排查问题复杂。</p><p>应用的拆分往往都是基于业务（领域）边界的拆分，服务之间的状态也没必要真的实现强一致性。</p><p><code>最终一致性</code>往往是业务架构设计中需要考虑的，因此，业务中常用的分布式事务是类似于<code>RocketMQ</code>这种中间件来实现。</p><p>按照领域拆分不同的领域事件消息，通过可靠的消息写入与消费来实现业务的最终一致性。</p><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><p><a href="https://www.zhihu.com/question/3027272" target="_blank" rel="noopener">数据库事务原子性、一致性是怎样实现的？</a>8</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时隔两年，再从新学习一下事务以及分布式事务。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="分布式" scheme="http://simyy.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="事务" scheme="http://simyy.cn/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL分类</title>
    <link href="http://simyy.cn/2020/05/07/nosql-classify/"/>
    <id>http://simyy.cn/2020/05/07/nosql-classify/</id>
    <published>2020-05-07T15:09:09.000Z</published>
    <updated>2020-05-07T15:36:40.699Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL分类简介。</p><a id="more"></a><p>NoSQL数据库可分为：<code>键值存储</code>、<code>列存储</code>、<code>文档存储</code>与<code>图存储</code>。</p><p><img src="/images/nosql_classify_01.png" alt=""></p><h5 id="键值存储"><a href="#键值存储" class="headerlink" title="键值存储"></a>键值存储</h5><p><code>键值存储</code>是由KV哈希表来实现，例如，<code>Redis</code>、<code>Memcached</code>。</p><p><strong>优点</strong>：查找速度快，查找数据时间复杂度O(1)。</p><p><strong>缺点</strong>：数据无结构化，通常只被当作字符串或者二进制数据，数据无序。</p><p><code>Redis</code>支持了特殊的数据结构。</p><h5 id="列存储"><a href="#列存储" class="headerlink" title="列存储"></a>列存储</h5><p><code>列存储</code>是按列存储数据的，例如，<code>HBase</code>/<code>Cassandra</code>。</p><p><strong>优点</strong>：针对列的查询性能好；方便存储结构化和半结构化数据，方便做数据压缩与按列扩展（横向扩展）。</p><p><strong>缺点</strong>：功能相对受限。</p><h5 id="文档存储"><a href="#文档存储" class="headerlink" title="文档存储"></a>文档存储</h5><p><code>文档存储</code>是基于键值对的扩展，例如，<code>MongoDB</code>/<code>CouchDB</code>。</p><p><strong>优点</strong>：数据结构要求不严格；表结构可变；不需要预先定义表结构。</p><!-- **缺点**：查询性能不高，缺乏统一的查询语法。 --><h5 id="图存储"><a href="#图存储" class="headerlink" title="图存储"></a>图存储</h5><p><code>图存储</code>是基于节点和关系组成的图，例如，<code>Neo4j</code>。</p><p><strong>优点</strong>：利用图结构相关算法(最短路径、节点度关系查找等)。</p><p><strong>缺点</strong>：可能需要对整个图做计算，不利于图数据分布存储。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NoSQL分类简介。&lt;/p&gt;
    
    </summary>
    
      <category term="中间件" scheme="http://simyy.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="数据库" scheme="http://simyy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="NoSQL" scheme="http://simyy.cn/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot原理分析</title>
    <link href="http://simyy.cn/2020/04/18/java-springboot/"/>
    <id>http://simyy.cn/2020/04/18/java-springboot/</id>
    <published>2020-04-18T05:03:22.000Z</published>
    <updated>2020-04-23T08:01:28.843Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单分析下SpringBoot的原理设计。 </p><a id="more"></a><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p><code>SpringBoot</code>是为了简化构建应用的复杂度。</p><blockquote><p>SpringBoot到底解决了什么问题？</p></blockquote><hr><p><strong>在SpringBoot出现之前</strong></p><p>应用构建是建立在大量的<code>XML配置</code>之上，功能模块的依赖全部由开发人员自行整合。</p><p>整合的过程复杂不说，还会存在不同的整合方式，稍有不慎就会出现各种奇奇怪怪的问题。</p><p><strong>在SpringBoot出现之后</strong></p><p>应用构建是建立在大量的<code>starter</code>之上，功能模块的依赖通过<code>maven</code>引入后自动整合。</p><hr><h4 id="约定大于配置"><a href="#约定大于配置" class="headerlink" title="约定大于配置"></a>约定大于配置</h4><p><code>约定大于配置</code>是实现SpringBoot的基本原则。</p><p>SpringBoot整合了一套<code>默认配置</code>，不需要开发者手动配置<code>XML</code>，只有当默认配置不满足的情况下才需要手动修改默认配置。</p><h4 id="四大核心"><a href="#四大核心" class="headerlink" title="四大核心"></a>四大核心</h4><p><code>四大核心</code>包括：<code>auto-configuration（自动配置）</code>、<code>starters（起步依赖）</code>、<code>cli</code>和<code>actuator</code>。</p><p><strong>auto-configuration</strong></p><p><code>auto-configuration</code>是SpringBoot自动配置的核心，提供模块自动装配功能。</p><p>常见的<code>Enable**</code>注解属于自动配置的一部分。</p><p><strong>starters</strong></p><p><code>starters</code>是SpringBoot功能整合的关键，按照约定大于配置的原则实现。</p><p>例如，<code>spring-boot-starter-web</code>是<code>Spring MVC</code>的一种整合，不需要再去配置<code>servlet.xml</code>及<code>web.xml</code>，仅需要通过改变配置参数即可满足需求。</p><p><strong>cli</strong></p><p><code>cli</code>是快速创建原型项目的命令行工具，支持项目创建、编译打包等功能。</p><p><code>cli</code>还支持运行<code>Groovy脚本</code>。</p><p><strong>actuator</strong></p><p><code>actuator</code>是用于应用的监控与管理的工具，可以查看应用配置及自身环境属性等信息。</p><p><code>actuator</code>提供<code>REST API</code>来查询应用运行时的内部状态。</p><p><code>actuator</code>虽然提供便利，但也存在一定的安全风险，因此一般与<code>spring-boot-start-security</code>一起使用。</p><h4 id="自动配置的原理"><a href="#自动配置的原理" class="headerlink" title="自动配置的原理"></a>自动配置的原理</h4><blockquote><p><code>auto-configuration（自动配置）</code>是SpringBoot自动配置的核心，包括所有<code>Enable**</code>注解。</p></blockquote><p>首先，<code>starters</code>是SpringBoot模块整合的关键，通过简单的<code>maven</code>引入就可以实现模块的整合。</p><blockquote><p>那么<code>starter</code>是如何被引入的？</p></blockquote><ol><li><p>SpringBoot启动后会去依赖的<code>starter</code>包中查找<code>resources/META-INF/spring.factories</code>文件；</p></li><li><p>按照<code>spring.factories</code>来加载<code>AutoConfiture</code>配置类；</p></li><li><p>扫描<code>@Configuration</code>注解将配置注入到<code>Context</code>容器中。</p></li></ol><p>其中，<code>spring.factories</code>就是一种约定，SpringBoot按照这种约定来是先模块的自动加载配置。</p><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><h6 id="启动注解的扫描过程"><a href="#启动注解的扫描过程" class="headerlink" title="启动注解的扫描过程"></a>启动注解的扫描过程</h6><p><code>@SpringBootApplication</code>是SpringBoot项目的启动注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">        <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">        <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>@EnableAutoConfiguration</code>是启动自动配置的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，涉及到<code>@Import</code>及<code>ImportSelector</code>两个功能点。</p><h6 id="Import-与-ImportSelector"><a href="#Import-与-ImportSelector" class="headerlink" title="@Import 与 ImportSelector"></a>@Import 与 ImportSelector</h6><p><code>@Import</code>注解用于将指定的实例注入到IOC容器中，等同于<code>XML中的import</code>。</p><p><code>@Import</code>支持三种注入方式：<code>直接注入</code>、<code>条件注入</code>和<code>动态注入</code>。</p><p><strong>直接注入</strong></p><p>通过直接引入目标配置<code>@Import({XXXAutoConfig.class})</code>来实现配置加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;XXXAutoConfig.class&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnabletXXX &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>条件注入</strong></p><p>通过实现<code>ImportSelector</code>来选择注入的配置信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;XXXEnableSelector.class&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnabletXXX &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXEnableSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;XXXAutoConfigConfig.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态注入</strong></p><p>通过实现<code>ImportBeanDefinitionRegistrar</code>来实现动态注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DynamicConfigEnableRegistrar.class&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnabletXXX &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注入的注解</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DynamicConfig &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现ImportBeanDefinitionRegistrar来实现动态扫描注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfigEnableRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册扫码器</span></span><br><span class="line">        DynamicRegisterScanner scanner = <span class="keyword">new</span> DynamicRegisterScanner(registry, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置classloader</span></span><br><span class="line">        scanner.setResourceLoader(resourceLoader);</span><br><span class="line">        scanner.registerFilters();</span><br><span class="line">        <span class="comment">// 设置待扫描注解</span></span><br><span class="line">        scanner.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(DynamicConfig.class));</span><br><span class="line">        <span class="comment">// 设置待扫描路径</span></span><br><span class="line">        scanner.doScan(<span class="string">"x.y.z.package"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mybatis的mapper扫描</code>就是通过<code>动态注入</code>的方式实现。</p><h6 id="扫描并加载配置"><a href="#扫描并加载配置" class="headerlink" title="扫描并加载配置"></a>扫描并加载配置</h6><p>SpringBoot通过实现<code>ImportSelector</code>接口来扫描并加载配置。</p><ul><li><code>getCandidateConfigurations</code>从<code>META-INF/spring.factories</code>获取待配置的类；</li><li><code>getAutoConfigurationEntry</code>去重并获取已排除的配置类，并出发<code>ImportEvent</code>事件；</li><li>重写<code>selectImports</code>实现配置类的导入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span> ... </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 获取自动配置</span></span><br><span class="line">        AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">                autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">            AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 获取候选配置</span></span><br><span class="line">        List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">                attributes);</span><br><span class="line">        configurations = removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">        checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">            AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 从META-INF/spring.factories获取自动配置的类</span></span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">                getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations,</span><br><span class="line">                <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">                        + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>META-INF/spring.factories</code>约定配置格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  x.y.z.starter.StarterAutoConfiguration</span><br></pre></td></tr></table></figure><h4 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h4><p>SpringBoot提供了丰富的<code>条件注解</code>来解决依赖加载的问题。</p><hr><p>判断<code>Bean</code>是否注册到<code>IOC容器</code>中来确认是否触发当前逻辑，</p><ul><li><code>@ConditionalOnBean</code></li><li><code>@ConditionalOnMissingBean</code></li></ul><p>用于解决Bean的依赖问题，当存在某一个依赖模块时自动加载对应的依赖。</p><hr><p>判断<code>累加载器</code>中是否存在<code>Class类</code>来确认是否触发当前逻辑，</p><ul><li><code>@ConditionalOnClass</code></li><li><code>@ConditionalOnMissingClass</code></li></ul><hr><p>判断生存指定了<code>资源文件</code>来确认是否触发当前逻辑，</p><ul><li><code>@ConditionalOnResource</code></li></ul><p>可用于从远程拉取配置文件，实现应用的配置集中管理。</p><hr><p>此外，还包括<code>@ConditionalOnJava</code>、<code>ConditionalOnNotWebApplication</code>、<code>ConditionalOnWebApplication</code>等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单分析下SpringBoot的原理设计。 &lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
      <category term="Spring" scheme="http://simyy.cn/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://simyy.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java 表达式引擎分析</title>
    <link href="http://simyy.cn/2020/04/16/java-expression-plugin/"/>
    <id>http://simyy.cn/2020/04/16/java-expression-plugin/</id>
    <published>2020-04-16T13:26:33.000Z</published>
    <updated>2020-04-16T15:00:50.128Z</updated>
    
    <content type="html"><![CDATA[<p>本文将和介绍及分析表达式引擎。</p><a id="more"></a><h3 id="表达式引擎"><a href="#表达式引擎" class="headerlink" title="表达式引擎"></a>表达式引擎</h3><p><code>表达式引擎</code>是把字符串表达式转换为计算机可以理解运行的计算规则。</p><p><code>Groovy</code>就是最常见的基于JVM动态语言的表达式引擎之一。</p><p><code>表达式的引擎</code>是基于编程语言的基础之上<code>编译原理</code>的一种实现。</p><h4 id="常见功能"><a href="#常见功能" class="headerlink" title="常见功能"></a>常见功能</h4><p>表达式引擎常见的功能有<code>操作符</code>、<code>对象</code>、<code>条件语句</code>、<code>循环语句</code>、<code>函数</code>、<code>集合</code>、<code>异常</code>、<code>脚本</code>等。</p><p><img src="/images/java_expression_plugin_01.png" alt="java_expression_plugin_01.png"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>编译型与解释型</strong></p><p>计算机是不能理解高级语言的，更不能直接执行高级语言。</p><p>任何高级语言编写的程序若想被计算机运行，都必须将其转换成计算机语言（<code>机器码</code>）。</p><p><code>编译型</code>是将高级语言源代码<code>一次性编译</code>成可被该平台硬件执行的机器码。</p><p><code>解释型</code>不需要事先编译而直接将源代码<code>解释</code>成机器码并立即执行。</p><blockquote><p>与预编译相比，解释机器码并执行效率较低。</p></blockquote><p>在Java的表达式引擎中，<code>MVEL</code>支持普通的解释运行及编译运行。</p><p><strong>强类型与弱类型</strong></p><p><code>弱类型检查</code>不会对变量类型做任何假设，而是在运行时做类型推断及自动转化。</p><p><code>强类型检查</code>可以保证在编译时就确定变量类型从而才能生成高效和正确的代码。</p><hr><p>在Java的表达式引擎中，</p><p><code>FEL</code>属于强类型检查，它没有自己的类型系统，而是利用Java类型来实现；</p><p><code>QLExpress</code>和<code>Groovy</code>属于弱类型检查，在编译时不会对类型做任何检查，而是在运行期对其推断并转换。</p><hr><p><strong>表达式解析</strong></p><p>表达式可以分为<code>波兰式(前缀表达式)</code>、<code>逆波兰式(后缀表达式)</code>和<code>中缀表达式</code>。</p><p>其中，<code>波兰式</code>和<code>逆波兰式</code>更适合计算机来执行，具体可以<a href="https://blog.csdn.net/lovejay7/article/details/81584402" target="_blank" rel="noopener">参考</a>。</p><p>表达式会首先被解析为<code>语法树AST</code>（中缀表达式），但<code>中缀表达式</code>不适合计算机运算，因此，需要转换为<code>波兰式</code>或<code>逆波兰式</code>。</p><hr><p><strong>Java表达式引擎原理</strong></p><p>表达式引擎的基础是<code>编译原理</code>及<code>Java字节码</code>技术。</p><p>在编译原理中，需要实现<code>解释器</code>和<code>编译器</code>。</p><p>解释器包括<code>语法分析</code>、<code>词法分析</code>及<code>语义分析</code>，而解释器包括<code>中间代码</code>和<code>目标代码</code>。</p><p>Java中的规则引擎一般会把<code>表达式</code>生成<code>.class</code>字节码，并利用JVM加载到内存中来执行，从而达到编译的运行效率。</p><hr><p>目前，规则的引擎的实现大体分为两种：<code>利用Java类运行时动态编译技术</code> 和 <code>利用ASM字节码生成技术</code>。</p><p><strong>利用Java类运行时动态编译技术</strong></p><blockquote><p>核心接口： <code>javax.tools接口JavaCompiler</code>。</p></blockquote><ul><li>使用<code>antlr</code>解析把表达式成<code>AST</code>；</li><li>使用JDK工具(<code>javax.tools.JavaCompiler</code>)动态编译成<code>.class</code>文件；</li><li>利用<code>URLClassLoader</code>把<code>.class</code>文件放入JVM直接运行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression string -&gt; antlr -&gt; AST -&gt; comiple -&gt; java source template -&gt; java class -&gt; Expression</span><br></pre></td></tr></table></figure><p>具体可<a href="https://yq.aliyun.com/articles/85362?spm=a2c4e.11153940.0.0.883e6bafJUGsec" target="_blank" rel="noopener">参考</a>。</p><p><strong>利用ASM字节码生成技术</strong></p><blockquote><p>核心技术：<code>antlr语法解析器</code> 与 <code>ASM字节码生成技术</code>。</p></blockquote><ul><li>使用<code>antlr</code>解析把表达式成<code>AST</code>；</li><li>利用<code>AMS</code>把<code>AST</code>的节点重新编排成<code>.class</code>文件或者指令；</li><li>利用<code>URLClassLoader</code>把<code>.class</code>文件放入JVM直接运行。</li></ul><hr><h4 id="Java中的表达式引擎"><a href="#Java中的表达式引擎" class="headerlink" title="Java中的表达式引擎"></a>Java中的表达式引擎</h4><p>表达式引擎的对比介绍可<a href="https://zhuanlan.zhihu.com/p/33927344" target="_blank" rel="noopener">参考</a>。</p><p><strong>基础功能</strong></p><p><code>FEL</code>、<code>SimpleExpress</code>都是仅支持表达式的基础功能，依赖Java类型系统。</p><p>此外，还包括<code>JUEL</code>、<code>JSEL</code>。</p><p><strong>高级功能</strong></p><p><code>Aviator</code>有自己的类型系统，属于若类型检查。</p><p><code>QLExpress</code>是阿里开源的表达式引擎，同样属于若类型检查，强调功能扩展。</p><p><code>Groovy</code>兼容Java语法，同时支持强类型和若类型检查，支持更多的集合操作。</p><p><code>Groovy</code>是<code>Java</code>官方的脚本语言，更适合构建大型规则引擎。</p><hr><p>性能对比：</p><p>表达式：<br><code>foobar * 100 &lt; 200 || foobar &gt; 300 || (foobar &lt; 200 &amp;&amp; foobar + 5 &lt; 300)</code></p><p>循环次数：<br><code>100 * 10000</code></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jsel::exec  Run Time:   2164 ms</span><br><span class="line">jselCompiled::exec  Run Time:   28 ms</span><br><span class="line">mvel::exec  Run Time:   1881 ms</span><br><span class="line">mvelCompiled::exec  Run Time:   120 ms</span><br><span class="line">qlexpress::exec Run Time:   14471 ms</span><br><span class="line">qlexpressCompiled::exec Run Time:   113 ms</span><br><span class="line">juel::exec  Run Time:   159 ms</span><br><span class="line">groovy::exec    Run Time:   680 ms</span><br><span class="line">groovyCompiled::exec    Run Time:   45 ms</span><br><span class="line">aviator::exec   Run Time:   16736 ms</span><br><span class="line">aviatorCompiled::exec   Run Time:   43 ms</span><br></pre></td></tr></table></figure></p><hr><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p><code>流程编排</code>：通过动态脚本来管理流程调度，例如，基于微服务来动态搭建流程。</p><p><code>规则引擎</code>：利用动态表达式来实时修改配置，例如，营销规则配置、审核流条件判断。</p><p><code>脚本引擎</code>：利用动态脚本来实现在线编辑器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将和介绍及分析表达式引擎。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
      <category term="表达式引擎" scheme="http://simyy.cn/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BC%95%E6%93%8E/"/>
    
      <category term="规则引擎" scheme="http://simyy.cn/tags/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 失效的原因</title>
    <link href="http://simyy.cn/2020/04/02/java-spring-aop-ineffective/"/>
    <id>http://simyy.cn/2020/04/02/java-spring-aop-ineffective/</id>
    <published>2020-04-02T10:53:09.000Z</published>
    <updated>2020-04-03T05:54:31.768Z</updated>
    
    <content type="html"><![CDATA[<p>分析AOP在一定情况下会失效的原因。</p><a id="more"></a><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p><code>Spring</code>提供了事务注解<code>Transactional</code>，在一定的使用场景下会发生事务不生效的情况。</p><p><strong>注：</strong>下列场景中，<code>updateInDB</code>为数据库更新操作。</p><h6 id="场景1（事务生效）"><a href="#场景1（事务生效）" class="headerlink" title="场景1（事务生效）"></a>场景1（事务生效）</h6><p>一般的使用方式如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update A</span></span><br><span class="line">        updateInDB(a)</span><br><span class="line">        b = ...</span><br><span class="line">        <span class="comment">// Then update B</span></span><br><span class="line">        updateB(b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update B</span></span><br><span class="line">        updateInDB(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A(...);</span><br><span class="line">        service.updateA(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>updateA</code>包含了<code>updateB</code>的操作，因此<code>updateB</code>与<code>updateA</code>会在一个事务中。</p><p>此时，<code>updateA</code>与<code>updateB</code>会同时生效或失效。</p><h6 id="场景2（事务失效）"><a href="#场景2（事务失效）" class="headerlink" title="场景2（事务失效）"></a>场景2（事务失效）</h6><p>考虑<code>内部调用</code>的情况如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">update</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateA(A)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update A</span></span><br><span class="line">        updateInDB(a)</span><br><span class="line">        b = ...</span><br><span class="line">        <span class="comment">// Then update B</span></span><br><span class="line">        updateB(b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update B</span></span><br><span class="line">        updateInDB(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A(...);</span><br><span class="line">        service.update(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与场景1不同，此时通过<code>无事务标识的update</code>调用<code>有事务标识的updateA</code>。</p><p>此时，<code>updateA</code>与<code>updateB</code>的事务会失效。</p><h6 id="场景3（事务失效）"><a href="#场景3（事务失效）" class="headerlink" title="场景3（事务失效）"></a>场景3（事务失效）</h6><p>考虑<code>继承调用</code>的场景如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update A</span></span><br><span class="line">        updateInDB(a)</span><br><span class="line">        b = ...</span><br><span class="line">        <span class="comment">// Then update B</span></span><br><span class="line">        updateB(b)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Update B</span></span><br><span class="line">        updateInDB(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">BaseService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Invoke super.method</span></span><br><span class="line">        <span class="keyword">super</span>.updateA(a)</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A(...);</span><br><span class="line">        service.updateA(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BaseService.updateA</code>标记了<code>Transactional</code>注解。</p><p><code>Service</code>继承自<code>BaseService</code>，覆盖了<code>updateA</code>，但没有事务标识。</p><p>此时，<code>service.updateA</code>调用<code>super.updateA</code>是无法保证事务的有效性。</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>首先，<code>Spring的核心</code>是<code>IOC控制反转</code>和<code>AOP面向切面编程</code>。</p><p><code>IOC控制反转</code>也被称为<code>DI依赖注入</code>，负责管理Spring项目中所有对象的<code>生命周期</code>与<code>依赖关系</code>。</p><p><code>AOP面向切面编程</code>是通过<code>预编译</code>或<code>动态代理</code>来改变原有模块功能的技术方式。</p><blockquote><p><code>IOC</code>是实现<code>AOP</code>的基础。</p></blockquote><p><code>AOP</code>无论哪种实现方式都会为模块生成新的代理模块，而模块之间的依赖注入是依赖<code>IOC</code>的。</p><p>也就是说，如果希望<code>AOP</code>生效，必须通过<code>IOC</code>管理的对象实例才可以生效。</p><hr><blockquote><p><code>内部调用</code>: 通过<code>this</code>或<code>super</code>的调用。</p></blockquote><p>通过<code>this</code>和<code>super</code>产生的函数调用与<code>Spring IOC</code>无关，因此<code>AOP</code>无效。</p><p>在<code>场景2</code>和<code>场景3</code>中，虽然<code>updateA</code>与<code>super.updateA</code>都带有Spring的<code>Transactional</code>注解，</p><p>但是通过<code>this</code>与<code>super</code>来调用的，因此，<code>Transactional</code>注解无效。</p><blockquote><p>只有通过<code>代理</code>调用，<code>AOP</code>才会生效，而<code>代理</code>是<code>Spring IOC</code>的一部分。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析AOP在一定情况下会失效的原因。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
      <category term="Spring" scheme="http://simyy.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Python Json序列化</title>
    <link href="http://simyy.cn/2020/03/16/python-json-serialize/"/>
    <id>http://simyy.cn/2020/03/16/python-json-serialize/</id>
    <published>2020-03-16T04:10:51.000Z</published>
    <updated>2020-03-16T04:57:53.821Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下Python对象中关于Json的序列化和反序列化。<br><a id="more"></a></p><p><code>Python</code>中常用的<code>Json序列化</code>采用<code>json.dupms</code>以及<code>json.loads</code>来实现。</p><h5 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps"></a>json.dumps</h5><p><code>json.dumps</code>是我们最为常用的序列化方式，用于<code>dict</code>转换成<code>Json字符串</code>。</p><p>为了解决对象序列化的问题，一般需要利用<code>__dict__</code>来获取对象的所有字段内容。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj, default=<span class="keyword">lambda</span> obj: obj.__dict__)</span><br></pre></td></tr></table></figure><blockquote><p>存在问题：如果某一字段的类型为某一个类，在序列过程中就会出现问题。</p></blockquote><p>此时，由于该非基础类型的字段无法直接转化为dict，从而<code>lambda obj: obj.__dict__)</code>会失效。</p><p>为了解决上述问题，一般可以通过定制化每一个类的序列化函数，然后通过<code>default</code>来指定。</p><p>类似这种,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="keyword">None</span></span><br><span class="line">        self.age = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Address</span></span><br><span class="line">        self.address = <span class="keyword">None</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.city = <span class="keyword">None</span></span><br><span class="line">        self.province = <span class="keyword">None</span></span><br><span class="line">        self.area_code = <span class="keyword">None</span></span><br><span class="line">        self.area_detail = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student2d</span><span class="params">(student_obj)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">json.dumps(obj, default=student2d)</span><br></pre></td></tr></table></figure><h5 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads"></a>json.loads</h5><p><code>json.loads</code>是我们最为常用的反序列化方式，用于<code>Json字符串</code>转换成<code>dict</code>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.loads(json_str, object_hook=xxxx)</span><br></pre></td></tr></table></figure><blockquote><p>存在同样的问题：如果某一字段的类型为某一个类，在反序列过程中时无法识别到具体的类结构。</p></blockquote><p>存在上述问题的原因在于，<code>Python</code>属于<code>非强类型检查</code>，初始化的类时无法获取字段的具体类型，只有在运行期初始化才确定。</p><p>同样，为了解决上述问题，一般可以通过定制化每一个类的反序列化函数，然后通过<code>object_hook</code>来指定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="keyword">None</span></span><br><span class="line">        self.age = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Address</span></span><br><span class="line">        self.address = <span class="keyword">None</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.city = <span class="keyword">None</span></span><br><span class="line">        self.province = <span class="keyword">None</span></span><br><span class="line">        self.area_code = <span class="keyword">None</span></span><br><span class="line">        self.area_detail = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d2student</span><span class="params">(self, d)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">json.loads(obj, object_hook=d2student)</span><br></pre></td></tr></table></figure><h5 id="通用序列化"><a href="#通用序列化" class="headerlink" title="通用序列化"></a>通用序列化</h5><p>仍然存在的问题：<code>每个类都需要定义自己的序列化和反序列化函数</code>。</p><p>上面的解决方式会带来大量的重复编码的功能。</p><p>为了解决这个问题，利用<code>abc</code>模块实现序列化的抽象，如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractJsonSerializer</span><span class="params">(abc.ABC)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>所有带有<code>Json序列化</code>功能的类都需要继<code>AbstractJsonSerializer</code>。</p><p>下面简单介绍下序列化和反序列化的思路。</p><h6 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h6><p>序列化过程中，为了避免<code>__dict__</code>中特殊类造成的影响，需要对字典值类型做判断。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环遍历对象字段</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> self.__dict__.items():</span><br><span class="line">    <span class="comment"># 字段值属于基础类型</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(v, int) <span class="keyword">or</span> isinstance(v, str) \</span><br><span class="line">            <span class="keyword">or</span> isinstance(v, float) <span class="keyword">or</span> isinstance(v, list) \</span><br><span class="line">            <span class="keyword">or</span> isinstance(v, tuple) <span class="keyword">or</span> isinstance(v, set) \</span><br><span class="line">            <span class="keyword">or</span> isinstance(v, dict):</span><br><span class="line">        _d[k] = v</span><br><span class="line">    <span class="comment"># 字段值时特殊类型</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 判断字段值是否实现了AbstractJsonSerializer</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> issubclass(v.__class__, AbstractJsonSerializer):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"[%s] must be implemented JsonSerializer"</span> % v.__class__)</span><br><span class="line">        <span class="comment"># 由于特殊类型字段值实现了AbstractJsonSerializer，则直接调用序列化赋值</span></span><br><span class="line">        _d[k] = v.serialize()</span><br></pre></td></tr></table></figure><h6 id="deserialize"><a href="#deserialize" class="headerlink" title="deserialize"></a>deserialize</h6><p>反序列化过程中，为了避免特殊类造成的类型无法确定的问题，需要在类中指定特殊字段类型的映射。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抽象方法，指定特殊字段类型映射</span></span><br><span class="line"><span class="meta">@abc.abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">field_cls</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 返回值例如，return &#123;'address': Address&#125;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, d: dict)</span>:</span></span><br><span class="line">    <span class="comment"># 获取特殊字段类型映射</span></span><br><span class="line">    cls_map = self.field_cls()</span><br><span class="line">    <span class="comment"># 判断特殊字段类型映射是否满足要求</span></span><br><span class="line">    <span class="keyword">if</span> cls_map <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> isinstance(cls_map, dict):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'[%s].special_field_class_map is must be a dict'</span> % self.__class__)</span><br><span class="line">    <span class="comment"># 遍历类对象的字段</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> self.__dict__.keys():</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 非特殊字段类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls_map <span class="keyword">or</span> k <span class="keyword">not</span> <span class="keyword">in</span> cls_map:</span><br><span class="line">            self.__setattr__(k, d[k])</span><br><span class="line">        <span class="comment"># 特殊字段类型</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cls = cls_map[k]</span><br><span class="line">            <span class="comment"># 判断特殊字段类型是否实现了序列化</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> issubclass(cls, AbstractJsonSerializer):</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">"[%s] must be implemented JsonSerializer"</span> % cls.__class__)</span><br><span class="line">            <span class="comment"># 由于特殊类型字段值实现了AbstractJsonSerializer，则直接调用反序列化赋值</span></span><br><span class="line">            self.__setattr__(k, cls().deserialize(d[k]))</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h6 id="驼峰和下划线命名方式的转换"><a href="#驼峰和下划线命名方式的转换" class="headerlink" title="驼峰和下划线命名方式的转换"></a>驼峰和下划线命名方式的转换</h6><p>下面两个方法时用来兼容<code>驼峰</code>和<code>下划线</code>的字段命名的不同。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段去除`_`并全部小写</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_attr</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> key.replace(<span class="string">'_'</span>, <span class="string">''</span>).lower()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代替__setattr__</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_attr</span><span class="params">(d, obj)</span>:</span></span><br><span class="line">    <span class="comment"># 存储对象字段映射，&#123;格式化字段：字段&#125;</span></span><br><span class="line">    obj_key_dict = dict()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> obj.__dict__.keys():</span><br><span class="line">        <span class="keyword">if</span> key.startswith(<span class="string">'__'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        obj_key_dict[AbstractJsonSerializer.format_attr(key)] = key</span><br><span class="line">    <span class="comment"># 遍历字典中数据</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">        <span class="comment"># 获取字典的格式化key</span></span><br><span class="line">        format_key = AbstractJsonSerializer.format_attr(key)</span><br><span class="line">        <span class="comment"># 判断是否存在于对象字段映射</span></span><br><span class="line">        <span class="keyword">if</span> format_key <span class="keyword">in</span> obj_key_dict:</span><br><span class="line">            obj.__setattr__(obj_key_dict[format_key], d[key])</span><br></pre></td></tr></table></figure><h6 id="完整版实现"><a href="#完整版实现" class="headerlink" title="完整版实现"></a>完整版实现</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractJsonSerializer</span><span class="params">(abc.ABC)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Json Serializer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">field_cls</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return field class map</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, need_format=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        convert obj to dict</span></span><br><span class="line"><span class="string">        :return: dict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        _d = dict()</span><br><span class="line">        d = self.__dict__</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(v, int) <span class="keyword">or</span> isinstance(v, str) \</span><br><span class="line">                    <span class="keyword">or</span> isinstance(v, float) <span class="keyword">or</span> isinstance(v, list) \</span><br><span class="line">                    <span class="keyword">or</span> isinstance(v, tuple) <span class="keyword">or</span> isinstance(v, set) \</span><br><span class="line">                    <span class="keyword">or</span> isinstance(v, dict):</span><br><span class="line">                _d[k] = v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> issubclass(v.__class__, AbstractJsonSerializer):</span><br><span class="line">                    <span class="keyword">raise</span> Exception(<span class="string">"[%s] must be implemented JsonSerializer"</span> % v.__class__)</span><br><span class="line">                _d[k] = v.serialize()</span><br><span class="line">        <span class="keyword">return</span> _d</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, d: dict)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        convert dict to obj</span></span><br><span class="line"><span class="string">        :param: d: dict</span></span><br><span class="line"><span class="string">        :return: obj</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cls_map = self.field_cls()</span><br><span class="line">        <span class="keyword">if</span> cls_map <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> isinstance(cls_map, dict):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'[%s].special_field_class_map is must be a dict'</span> % self.__class__)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.__dict__.keys():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cls_map <span class="keyword">or</span> k <span class="keyword">not</span> <span class="keyword">in</span> cls_map:</span><br><span class="line">                self.__setattr__(k, d[k])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cls = cls_map[k]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> issubclass(cls, AbstractJsonSerializer):</span><br><span class="line">                    <span class="keyword">raise</span> Exception(<span class="string">"[%s] must be implemented JsonSerializer"</span> % cls.__class__)</span><br><span class="line">                self.__setattr__(k, cls().deserialize(d[k]))</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format_attr</span><span class="params">(key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        format field for x_y or xY to xy</span></span><br><span class="line"><span class="string">        :param key: field</span></span><br><span class="line"><span class="string">        :return: format field</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> key.replace(<span class="string">'_'</span>, <span class="string">''</span>).lower()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_attr</span><span class="params">(d, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param d: dict of obj</span></span><br><span class="line"><span class="string">        :param obj: target obj</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        obj_key_dict = dict()</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> obj.__dict__.keys():</span><br><span class="line">            <span class="keyword">if</span> key.startswith(<span class="string">'__'</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            obj_key_dict[AbstractJsonSerializer.format_attr(key)] = key</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">            format_key = AbstractJsonSerializer.format_attr(key)</span><br><span class="line">            <span class="keyword">if</span> format_key <span class="keyword">in</span> obj_key_dict:</span><br><span class="line">                obj.__setattr__(obj_key_dict[format_key], d[key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(AbstractJsonSerializer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">field_cls</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'address'</span>: Address&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="keyword">None</span></span><br><span class="line">        self.age = <span class="keyword">None</span></span><br><span class="line">        self.address = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(AbstractJsonSerializer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">field_cls</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.city = <span class="keyword">None</span></span><br><span class="line">        self.province = <span class="keyword">None</span></span><br><span class="line">        self.area_code = <span class="keyword">None</span></span><br><span class="line">        self.area_detail = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Student()</span><br><span class="line">    s.name = <span class="string">'jack'</span></span><br><span class="line">    s.age = <span class="number">11</span></span><br><span class="line">    a = Address()</span><br><span class="line">    a.city = <span class="string">'hangzhou'</span></span><br><span class="line">    a.province = <span class="string">'zhejiang'</span></span><br><span class="line">    a.area_code = <span class="string">'31000'</span></span><br><span class="line">    a.area_detail = <span class="string">'gongshuqu'</span></span><br><span class="line">    s.address = a</span><br><span class="line"></span><br><span class="line">    d = s.serialize()</span><br><span class="line">    print(d)</span><br><span class="line"></span><br><span class="line">    ss = Student().deserialize(d)</span><br><span class="line">    print(ss)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下Python对象中关于Json的序列化和反序列化。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://simyy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock原理分析</title>
    <link href="http://simyy.cn/2020/03/08/java-reentrantlock/"/>
    <id>http://simyy.cn/2020/03/08/java-reentrantlock/</id>
    <published>2020-03-08T10:48:56.000Z</published>
    <updated>2020-05-19T07:13:21.831Z</updated>
    
    <content type="html"><![CDATA[<p>从源码层面分析ReentrantLock原理和实现。</p><a id="more"></a><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p><code>ReentrantLock</code>通过设置<code>ReentrantLock.sync</code>来实现公平与非公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FairSync-amp-NonfairSync"><a href="#FairSync-amp-NonfairSync" class="headerlink" title="FairSync &amp; NonfairSync"></a>FairSync &amp; NonfairSync</h4><p><code>FairSync</code>和<code>NonfairSync</code>是实现公平锁与非公平锁的关键，均继承自<code>Sync</code>。</p><p><code>Sync</code>则是继承自<code>AbstractQueuedSynchronizer</code>，也就是大家常说的<code>AQS</code>。</p><blockquote><p><code>ReentrantLock</code>通过<code>AQS</code>和<code>CAS</code>来实现公平与非公平锁。</p></blockquote><h4 id="AQS的原理"><a href="#AQS的原理" class="headerlink" title="AQS的原理"></a>AQS的原理</h4><p><code>AQS</code>可以被称为<code>队列同步器</code>，作为<code>JUC</code>并发包的基础。</p><p><code>AQS</code>使用<code>state</code>来表示<code>同步状态</code>，也就是当前同步器的<code>加锁</code>情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span> ... </span>&#123;</span><br><span class="line">    <span class="comment">// state = 0, 表示当前锁已经释放，允许线程获取锁；</span></span><br><span class="line">    <span class="comment">// state &gt; 0, 表示当前锁重入的次数；</span></span><br><span class="line">    <span class="comment">// volatile仅保证可见性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 保证原子性更新，使用unsafe调用底层的CAS原子方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CLH（等待队列）</code>是AQS中线程阻塞的核心，它使用<code>双向队列</code>来管理线程的状态。</p><blockquote><p>队列的优势在于把<code>无序变有序</code>，具有<code>先进先出</code>的特点。</p></blockquote><p><img src="/images/java-reentrantlock-1.png" alt=""></p><p>线程通过获取<code>同步状态（state）</code>来判断是否进入<code>等待队列（CLH）</code>。</p><blockquote><p>CLH等待队列中<code>Head头节点</code>是持有当前同步器锁的线程节点。</p></blockquote><h4 id="lock-amp-tryLock"><a href="#lock-amp-tryLock" class="headerlink" title="lock &amp; tryLock"></a>lock &amp; tryLock</h4><p><code>lock</code>和<code>tryLock</code>的不同在于是否进入线程阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 请求获取锁，会阻塞</span></span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 请求获取锁，不会阻塞（不回考虑CLH等待队列，代码细节在非公平锁中有解析）</span></span><br><span class="line">    <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意：<code>sync</code>继承了<code>AbstractQueuedSynchronizer（AQS）</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象类</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 非阻塞抢占式获取锁（失败后直接返回，不参与CLH队列逻辑）</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="comment">// 初始状态尝试加锁</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已持有锁则增加重入数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractQueuedSynchronizer.acquire</code>是公平锁与非公平锁在<code>lock</code>时都会触发的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span> ... </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            <span class="comment">// 如果获取失败，</span></span><br><span class="line">            <span class="comment">// 1. addWaiter创建一个CLH的Node节点加入等待队列，</span></span><br><span class="line">            <span class="comment">// 2. acquireQueued循环等待获取锁</span></span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            <span class="comment">// 如果获取失败并且加入队列成功，则线程阻塞 </span></span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阻塞（循环）并不断尝试获取锁</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 循环（线程阻塞）, 直到当前线程获取到锁</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">// 获取CLH中当前线程节点的前驱节点</span></span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                <span class="comment">// 如果前驱节点是头结点，则尝试获取锁</span></span><br><span class="line">                <span class="comment">// 注意：head头节点是持有锁的线程节点</span></span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁后更新头节点问题（头结点为当前持有锁的线程节点）</span></span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果无法获取锁，则需要判断是否需要阻塞等待</span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    <span class="comment">// 如果需要阻塞的话，触发线程阻塞</span></span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败，则需要删除CLH中的线程节点</span></span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据前驱节点判断是否应该阻塞等待</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取前驱节点的等待状态</span></span><br><span class="line">        <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">        <span class="comment">// 如果是响应状态，则需要暂停阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 如果ws大于0(CANCELLED=1),前驱节点已取消等待，需要向前遍历一个等待中的节点</span></span><br><span class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                node.prev = pred = pred.prev;</span><br><span class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">            pred.next = node;</span><br><span class="line">        <span class="comment">// 如果ws&lt;=0(需要排除SIGNAL=-1,还有CONDITION=-2和PROPAGATE=-3,为初始状态), 尝试修改为响应状态</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// CAS原子操作</span></span><br><span class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程阻塞</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// LockSupport是JDK提供的用于阻塞线程的工具</span></span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出来，公平锁和非公平锁的大体流程相似：</p><ul><li>尝试获取锁</li><li>失败的话，加入CLH等待队列</li><li>按照CLH等待队列的逻辑获取锁（队首优先获取）</li><li>非队首节点判断自身是否需要进入线程阻塞</li><li>线程阻塞等待被唤醒（<code>唤醒是在前驱节点锁释放后触发的</code>）</li></ul><blockquote><p>那如何体现出两者的不同之处呢？<br>公平锁和非公平锁的区别在于<code>lock</code>与<code>tryAcquire</code>实现的不同。</p></blockquote><h5 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h5><p>公平锁的核心在于<code>CLH等待队列</code>。</p><p><code>CLH等待队列</code>按照线程入队的先后顺序来分配锁，在获取<code>state同步状态</code>时通过<code>unsafe的CAS</code>来操作来保证更新的原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公平锁    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用上面提到的AQS.acquire</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程</span></span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="comment">// AQS的同步状态（重入次数）</span></span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="comment">// 锁释放状态(重入次数为0)</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 重点逻辑：是否存在等待线程（与非公平锁的区别所在）</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                <span class="comment">// 如果不存在等待线程，不需要进入队列，直接尝试CAS设置同步状态</span></span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                <span class="comment">// 更新锁状态成功的话，设置独占线程</span></span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 锁重入</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            <span class="comment">// 更新重入次数</span></span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h5><p>非公平锁的核心在于<code>提前的抢占式获取锁</code>，如果提前抢占失败仍然会进入公平锁的锁分配逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公平锁  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不同之处1：在acquire之前，直接尝试获取锁</span></span><br><span class="line">        <span class="comment">// CAS原子操作尝试修改同步状态，成功则更新独占线程</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">        <span class="comment">// 获取失败，则继续尝试</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 同公平锁一样的逻辑</span></span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不同之处2：tryAcquire中直接尝试获取锁（不考虑CLH队列情况）</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上面有分析过</span></span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非公平获取（上面有分析过，这里仅指出与公平锁的不同）</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 不同之处2：不存在hasQueuedPredecessors的判断，缺少CLH队列校验</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从代码中可以得知，非公平锁的不同之处有两点：</p><ul><li><code>lock</code>时直接使用<code>CAS</code>尝试获取锁 </li><li><code>acquire不考虑CLH等待队列</code>，直接使用<code>CAS</code>尝试获取锁</li></ul></blockquote><h5 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a>unlock</h5><p><code>锁的释放</code>会唤醒CLH等待队列中后续的阻塞线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span> ... </span>&#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 尝试释放锁成功（重入情况下不一定释放锁，可能仅减少重入次数）</span></span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            <span class="comment">// CLH等待队列非空，头结点非初始状态（waitStatus=0为节点初始状态）</span></span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 唤醒CLH等待队列中的阻塞线程节点</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试释放</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 减少重入数</span></span><br><span class="line">        <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">        <span class="comment">// 判断锁的所有权</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">        <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 如果重入数为0，则释放锁并清空独占线程</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            free = <span class="keyword">true</span>;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新锁状态</span></span><br><span class="line">        setState(c);</span><br><span class="line">        <span class="keyword">return</span> free;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 唤醒CLH队列中阻塞的线程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        <span class="comment">// 过滤掉空节点与已删除节点（waitStatus=1）</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 从对尾开始遍历直到对首，找到一个距离头节点最近的节点唤醒</span></span><br><span class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 与LockSupport.park对应，停止阻塞线程</span></span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>锁释放过程中需要注意：</p><ul><li>每次<code>tryRelease</code>不一定会释放锁，仅可能<code>减少重入次数</code>；</li><li>如果<code>重入次数为0</code>则代表锁可以释放，可以<code>唤醒CLH等待队列中阻塞的线程</code>。</li></ul></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>无论是公平锁和非公平锁，CLH等待队列都是存在的。</p><p><code>公平</code>是利用<code>队列的先进先出</code>来实现，而<code>非公平</code>是在加入队列之前尝试获取锁。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从源码层面分析ReentrantLock原理和实现。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://simyy.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://simyy.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://simyy.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RPC实现原理</title>
    <link href="http://simyy.cn/2020/02/17/rpc/"/>
    <id>http://simyy.cn/2020/02/17/rpc/</id>
    <published>2020-02-17T14:13:16.000Z</published>
    <updated>2020-02-18T10:06:15.958Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单记录下RPC框架的原理。</p><a id="more"></a><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>RPC</code>全称为<code>Remote Procedure Call</code>，译为<code>远程过程调用</code>。</p><p>常见的<code>RPC框架</code>的包括<code>Dubbo</code>、<code>Thrift</code>、<code>Hissan</code>、<code>GRPC</code>等。</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p><code>RPC</code>主要是由<code>提供者</code>、<code>消费者</code>和<code>注册中心</code>三部分组成。</p><p><img src="/images/rpc-1.png" alt=""></p><ol><li><p><code>提供者</code>是服务的提供方，需要把自身提供的服务注册到<code>注册中心</code>。</p></li><li><p><code>消费者</code>是服务的消费方，需要从<code>注册中心</code>获取最新的服务提供方的信息。</p></li></ol><p>此外，为了集群消费状态的监控，<code>消费者</code>也需要把自己的地址注册到<code>注册中心</code>。</p><ol start="3"><li><code>注册中心</code>是服务注册和发现的关键，用于保存<code>服务提供者的地址端口</code>以及<code>消费者的地址</code>。</li></ol><h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><p>常用的注册中心有<code>Zookeeper</code>、<code>Etcd</code>、<code>Consul</code>和<code>Euerka</code>。</p><p><code>Zookeeper</code>使用<code>zab</code>一致性协议，属于<code>CP</code>。</p><p><code>Etcd</code>和<code>Consul</code>均使用<code>raft</code>一致性协议，属于<code>CP</code>。</p><p><code>Euerka</code>属于<code>AP</code>，主要用于服务发现和注册（存在部分延迟影响不大），因此采用最终一致性。</p><blockquote><p><code>注册中心</code>的中心化问题？</p><p>服务的调用和发现都是依赖<code>注册中心</code>，其高可用尤为重要。</p><p><code>CAP</code>理论是由<code>一致性(C)</code>、<code>可用性(A)</code>、<code>分区备份(P)</code>组成。</p><ul><li><code>可用性(A)</code>：服务是否一直可用，集群环境下选主的方式（多分区）。</li><li><code>一致性(C)</code>：集群环境下的一致性算法包括<code>paxos</code>/<code>zab</code>/<code>raft</code>。</li><li><code>分区备份(P)</code>：数据多分备份。</li></ul></blockquote><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p><code>注册</code>可以分为两种：<code>节点注册</code>和<code>服务注册</code>，</p><ol><li><p><code>节点注册</code>：提供者、消费者，其中，提供者一般需要提供<code>IP</code>和<code>PORT</code>，而消费者仅提供<code>IP</code>；</p></li><li><p><code>服务注册</code>：提供者，仅需要提供当前节点所能提供的rpc服务。</p></li></ol><blockquote><p>注册存在<code>失败</code>的情况，因此需要设置合理的<code>失败重试机制</code>。</p></blockquote><p>注册的具体方式如图所示，</p><p><img src="/images/rpc-2.png" alt=""></p><p><code>/frpc</code>是<code>rpc</code>服务注册的独立命名空间。</p><blockquote><p><code>临时节点</code>的生命周期与注册节点相同，可以用于实现实时监控。</p></blockquote><p><code>非地址节点</code>都属于<code>持久节点</code>，<code>地址节点</code>属于<code>临时节点</code>。</p><p><code>服务隔离</code>是通过<code>/frpc/groupx</code>来实现的，通过把服务注册到不同的节点上来实现服务的隔离。</p><h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><p><code>发现</code>仅作为<code>消费者</code>的依赖服务获取方式。</p><p><code>发现</code>是通过<code>监控器Watcher</code>的方式来实现服务节点状态的实时更新。</p><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p><code>RPC</code>框架一般采用<code>直连调用</code>的方式来建立消费者和提供者之间的通信。</p><p><code>直连调用</code>的性能最佳，任何代理都会存在性能的损耗。</p><blockquote><p><code>服务网格</code>利用<code>proxy</code>来实现网格之间的调用，为了降低客户端的复杂度，牺牲了网络性能。</p></blockquote><p><code>通信方式</code>包括<code>TCP</code>、<code>UDP</code>、<code>HTTP</code>和<code>HTTP2</code>，常用的是<code>TCP</code>和<code>HTTP2</code>。</p><p><code>TCP</code>是传输层协议，存在粘包问题，需要自定义数据包格式。</p><p><img src="/images/rpc-3.png" alt=""></p><ul><li><code>Magic Number</code>：用于识别数据包的起始位置；</li><li><code>Serialize Type</code>：标识数据的序列化方式；</li><li><code>Packet Type</code>：标识数据包的结构类型；</li><li><code>Data Length</code>：标识数据的大小，用来读取完整的数据包；</li><li><code>Data Bytes</code>：具体数据。</li></ul><p><code>HTTP2</code>是应用层协议，用于取代<code>HTTP</code>，是<code>GRPC</code>中的通信方式。</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p><code>路由</code>是指同一服务下不同节点的选择策略，常见的选择策略包括<code>轮询</code>、<code>性能</code>、<code>负载</code>、<code>优先级</code>。</p><p><code>路由</code>一般分为两种：<code>基于客户端的路由</code>与<code>基于代理的路由</code>。</p><p><code>基于客户端的路由</code>是通过消费者自身的客户端来实现节点的选择策略，对消费者自身存在一定的性能消耗。</p><p><code>基于代理的路由</code>是通过部署再消费者环境下的独立存在，不会与消费者产生资源竞争，但存在一层网络性能损耗。</p><p>此外，<code>路由标签</code>可以用于服务的隔离。</p><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><p><code>监控的目标</code>可分为两种：</p><ul><li><code>实体</code>：生产者、消费者、服务状态；</li><li><code>性能</code>：接口耗时、接口QPS。</li></ul><p><code>实体数据</code>可以从<code>注册中心</code>直接拉取，不需要提供者和消费者参与。</p><p><code>性能数据的上报</code>采用异步上报的方式，从而避免对服务性能的影响。</p><h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><p><code>管理</code>可以分为<code>服务管理</code>和<code>节点管理</code>。</p><p><code>服务管理</code>是指服务的<code>生效</code>和<code>失效</code>。</p><p><code>节点管理</code>是指节点的<code>上线</code>、<code>下线</code>和<code>路由权重</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单记录下RPC框架的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="微服务" scheme="http://simyy.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="RPC" scheme="http://simyy.cn/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>消息系统</title>
    <link href="http://simyy.cn/2020/01/11/mq/"/>
    <id>http://simyy.cn/2020/01/11/mq/</id>
    <published>2020-01-11T08:37:10.000Z</published>
    <updated>2020-05-19T06:53:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>记录下最近对消息系统的思考和理解。<br><a id="more"></a><br><img src="/images/mq_6.png" alt=""></p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><code>消息系统</code>存在的目的在于：<code>解耦</code>、<code>异步</code>、<code>消峰</code>。</p><p><strong>解耦</strong></p><ul><li><code>依赖关系</code>：组件之间从强依赖变为弱依赖，事件触发通过消息异步同步到依赖组件。</li><li><code>时效</code>：消息系统是一种暂存数据的异步系统，触发的时效是无法保证的。</li></ul><p><strong>异步</strong> </p><ul><li><code>单工</code>：对于生产者和消费者来说，消息系统只是一种单工代理，生产者和消费者无法之间通信。</li><li><code>回调</code>: 异步意味着调用结果无法实时返回，调用结果需要通过配置回调来返回。</li></ul><p><strong>消峰：</strong> </p><ul><li><code>队列</code>：队列的实质是无序变有序、多路变单路，从而降低依赖方的请求压力。</li><li><code>结果</code>：消峰只是一种手段，数据还是需要返回给请求方，可以通过回调或消息的方式返回。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>消息系统可分为<code>代理（Broker）</code>、<code>生产者（Producer）</code>、<code>消费者（Consumer）</code>。</p><p><img src="/images/mq_1.png" alt=""></p><h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p><code>消息</code>是数据的载体，用于<code>生产者（Producer）</code>和<code>消费者（Consumer）</code>沟通的媒介。</p><p><strong>数据隔离</strong></p><ul><li><code>主题（Topic）</code>：用于区分不同业务类型的消息，隔离的是不同的业务事件。</li><li><code>分组（Group）</code>：用于区分同一主题下的不同业务方，隔离的是同一主题的不同订阅方。</li></ul><p><img src="/images/mq_2.png" alt=""></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><code>代理（Broker）</code>是用于连接<code>生产者（Producer）</code>和<code>消费者（Consumer）</code>的关键模块。</p><h5 id="隔离方式"><a href="#隔离方式" class="headerlink" title="隔离方式"></a>隔离方式</h5><p><code>代理（Broker）</code>的数据隔离可以分为<code>物理隔离</code>和<code>逻辑隔离</code>，</p><ul><li><code>物理隔离</code>：订阅系统数量和数据备份数量相同，订阅数据之间隔离，缺点明显，浪费存储空间。</li><li><code>逻辑隔离</code>：数据仅有一份，不同系统通过<code>偏移量（Offset）</code>来记录消费进度。</li></ul><blockquote><p><code>逻辑隔离</code>的优点在于数据仅此一份，不同业务系统消费同一份数据，也不会出现数据不一致的情况。</p></blockquote><h5 id="分组管理"><a href="#分组管理" class="headerlink" title="分组管理"></a>分组管理</h5><p><code>分组管理</code>指的是同一<code>Topic</code>下同一<code>Group</code>下不同消费者的管理。</p><p>每一个<code>Topic</code>都会存在多个消费队列，每个消费队列仅能对应一个消费者。</p><blockquote><p>为了维护队列消费进度的Ofsset，不允许并发修改Offset的情况，需要保证<code>队列 : 消费者 = 1 : 1</code></p></blockquote><ul><li><code>代理维护</code>：代理来管理消息队列的分配。</li><li><code>消费者维护</code>：消费者通过选举选择Leader节点用来管理消息队列的分配。</li></ul><p><img src="/images/mq_3.png" alt=""></p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p>存储方式可以采用传统的<code>BTree索引存储</code>和<code>文件存储</code>两种方式。</p><ul><li><code>BTree存储</code>的查询效率高，但写入效率低。</li><li><code>文件存储</code>的查询效率低，但写入效率高。</li></ul><p>考虑到消息的顺序读写，Kafka采用文件存储存储方式，追加写入日志。</p><blockquote><p><code>Kafka</code>的存储采用了<code>分区(partition)</code>、<code>分段(LogSegment)</code>和<code>稀疏索引</code>来实现高性能。</p></blockquote><p><img src="/images/mq_4.png" alt=""></p><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><p><code>数据分区</code>是指数据分布在不同物理机上，可以分为两种方式：<code>逻辑分区</code>、<code>物理分区</code>。</p><ul><li><code>物理分区</code>：数据备份的单位是物理机，物理机备份方式采用主从备份。</li><li><code>逻辑分区</code>：数据备份的单位是数据分片（Partition），分片是按照一主多从的方式来备份。</li></ul><p>数据分片（Partition）的备份与物理机不同，采用数据分片（Partition）的备份不需要关心的物理机</p><p><code>Kafka</code>采用了逻辑分区，<code>RocketMQ</code>才用了物理分区。</p><p><img src="/images/mq_5.png" alt=""></p><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><p>在集群环境下，<code>路由</code>是用于快速的定位和发现目标消息所在的位置。</p><p>在<code>kafka</code>中，通过选举功能选择一个<code>Broker</code>作为<code>Leader</code>，负责管理整个集群中<code>Topic</code>、<code>Broker</code>和<code>Partition</code></p><p>在<code>RocketMQ</code>中，<code>NameServer</code>是负责管理整个集群<code>Topic</code>及<code>Broker</code>信息。</p><p><code>RocketMQ</code>未使用<code>Zookeeper</code>，所有<code>Broker</code>的注册都是基于<code>NameServer</code>。</p><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p><code>生产者（Producer）</code>是消息的产生者，需要指定消息对应的<code>主题（Topic）</code>。</p><p><strong>发送方式</strong></p><ul><li><code>同步发送</code>：同步调用代理端，生产者可以感知消息发送的成功与否，确保此次消息的发送。</li><li><code>异步发送</code>：异步调用代理端，生产者无法感知消息发送的成功与否，在发送失败时仅能通过固定次数的重试。</li><li><code>批量发送</code>：也是一种<code>异步发送</code>，但是通过积累更多的消息一次性发送到代理端，主要用于大量消息的场景。</li></ul><p><strong>事务消息</strong></p><p><code>事务消息</code>是用来解决分布式事务的一种方式，它仅保证了消息的消费，如果出现消费失败是无法回滚，只能通过<code>人工介入</code>处理。</p><p>为了实现<code>事务消息</code>，生产者必须保证消息发送到代理端，那么只能选择<code>同步方式</code>来实现。</p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p><code>消费者（Consumer）</code>是消息的订阅方，需要指定消息对应的<code>主题（Topic）</code>和消费者的<code>分组（Group）</code>。</p><p><strong>消费方式</strong></p><ul><li><code>被动Push</code>：代理端主动推送消息，消费者只需要被动等待，代理端集中管理消息的分发。</li><li><p><code>主动Pull</code>：消费者主动拉取最新的消息，基于轮询的方式。</p><p><code>主动Pull</code>是消息系统常见的消费方式，主动拉取消息减少了代理端的复杂度。</p></li></ul><blockquote><p><code>主动Pull</code>的优点在于把数据分发的压力转移到消费者。</p></blockquote><p><strong>消费进度</strong></p><p>上面提到，<code>消费进度</code>是通过<code>Offset</code>来维护的，<code>Offset</code>的上报决定了消息的消费情况。</p><p><code>实时上报</code>：消费者处理完消息后立刻上报最新的<code>Offset</code>情况。</p><p><code>周期上报</code>：消费者处理完消息后会把消费情况写入缓存，消费者会定期上报最新的<code>Offset</code>情况。</p><p><code>实时上报</code>是同步方式，而<code>周期上报</code>是异步方式。</p><p>同步方式意味着阻塞，吞吐量不如异步方式。</p><p><strong>事务支持</strong></p><p>为了保证消息的成功消费，事务消息需要采用<code>实时上报</code>的方式。</p><p>异步意味着不能实时上报，如果上报失败是无法感知的。</p><blockquote><p>为了支持事务回滚，需要支持<code>临时消息</code>的隔离，在生产者事务提交后才转换为<code>正式消息</code>。</p></blockquote><p><strong>顺序消费</strong> </p><p>前面提到一个主题可能包括多个消费队列，多个消费队列之间是无法保证消费顺序的。</p><p>为了实现顺序消费，需要业务方按照一定规则把一类消息存储在同一个队列中，从而保证消息被同一个消费者消费。</p><p>但是，如果发生消费者组重新分配的情况会导致顺序消费失效。</p><p><strong>重复消费</strong></p><p>造成<code>重复消费</code>的两种情况：</p><ul><li>异常宕机导致<code>Offset</code>未上报</li><li>消费者线程执行超时无反馈</li></ul><p>上面两种情况均是由于<code>Offset</code>没有及时上报，这是无法避免的，所以需要消费者做好<code>幂等</code>处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下最近对消息系统的思考和理解。&lt;br&gt;
    
    </summary>
    
      <category term="中间件" scheme="http://simyy.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="消息队列" scheme="http://simyy.cn/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="Kafka" scheme="http://simyy.cn/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>记录2019</title>
    <link href="http://simyy.cn/2020/01/01/2019-look-back/"/>
    <id>http://simyy.cn/2020/01/01/2019-look-back/</id>
    <published>2020-01-01T07:06:41.000Z</published>
    <updated>2020-01-02T09:09:53.332Z</updated>
    
    <content type="html"><![CDATA[<p>毕业后的每一年过的都很快，好像没留下什么记忆。<br><a id="more"></a></p><p>上一次写这样的笔记还是三年前，今天突然想写点啥，可又不知道到底能写点啥。</p><h4 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h4><p>记得2017年来到杭州，匆匆忙忙租了临时住所，开始了装修的漫漫长路。</p><blockquote><p>高温、潮湿的天气</p></blockquote><p>杭州是一个没有春秋的城市，夏天很热，冬天很冷。</p><p>杭州的冬天与北方不同，整个冬天都在阴雨中度过，实在是不舒服。</p><p>当时租的是一个八十年的六层楼中的二楼，虽说屋子的两件卧室都是朝南的，但梅雨季时北侧的墙面、玻璃全是水滴。</p><p>为了对抗梅雨季，买了一台烘焙机，真的是神器，不过后来搬家后再也没有用过。</p><p>新家楼层很高，一点都不潮了，所以南方买房子真的不能买低楼层。</p><p>冬天的魔法攻击真不是闹着玩的，物理保暖装备还是有限，尤其是在没有采暖的屋子里，只能靠发抖了。</p><p>作为一个怕冷的北方人，理所当然的装上了地暖。</p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>来到杭州之后再没有挤过地铁，也几乎没做过公交车，一台小电驴就足够了。</p><blockquote><p>混乱的交通</p></blockquote><p>一直以来的主要交通工具都是电瓶车，由于每天上班都很晚，也从来没有赶上过电瓶车大军，偶而会遇到一次，真的会堵车（电瓶车）。</p><p>以前一直很羡慕人家开车，去年和老婆商量下买了台代步车，看了没几家迷迷糊糊的就定了。</p><p>虽然有车了，也没去过啥地方，每周最爱去的就是超市了，买上一周的吃的，宅在家里学习、看剧，好像对我俩来说这就是最舒服的事了。</p><p>其实，最开心的是买第一台电瓶车的时候，那天还下着雨，骑着小电驴载着我俩慢悠悠的回家了。</p><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><p>来杭州有两年半的时间了，工作上说不上顺利，但肯定的是自己成长了不少。</p><blockquote><p>经济寒冬</p></blockquote><p>在刚来杭州的时候就听做金融的同学说，这两年的经济会很差，首当其冲的就是互联网。</p><p>没想到真的发生在自己的身上，一个三流互联网公司把整个业务线、分公司全部裁掉，这样的事情从来没有听说过、没有想到过。</p><blockquote><p>奋斗逼之都</p></blockquote><p>除了旅游之都、互联网之都，杭州还被称为奋斗逼之都。</p><p>在毕业那会，大家都认为华为是最坑的，什么996、奋斗者协议都是华为搞出来的，大家都以这个为耻。</p><p>那会大家都希望能够进入互联网公司，因为它们代表了自由、开放、民主。</p><p>不知道从何时开始，B已经成为了杭州的标识，也成为了996的代名词。</p><p>目前来看，在杭州最累的肯定不是华为，因为大多数公司都在崇尚加班文化。</p><p>在我眼里，大多数的加班等同于低效率的工作，包括低效率的会议模式、无意义的会议主题、毫无依据的产品需求，可能这就是大公司的病（传染病）吧。</p><blockquote><p>团队与管理</p></blockquote><p>来到杭州后，也从单纯的开发岗位逐渐转变为技术管理，开始授人以渔。</p><p>对于团队来说，最重要的是信任（大家相互信任）。</p><p>见过一些团队，面对问题，团队的每一个人都不愿意承担，到最后，这个团队流动性很大，每个人也不会有太多成长。</p><p>想把团队做好一定要帮忙大家成长，自然而然的团队也会成长，其实自己在这个过程中也会不断成长。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>这一年杂七杂八看了不少书，也总结了不少技术知识。</p><p>这两年虽然博客更新的不多，但笔记还是做了不少，只是不太成章。</p><blockquote><p>曾经有人和我讲过，认知可以划分为三个阶段：三年、五年、八年。</p></blockquote><p>今年已经是第五年了，认知确实和三年时大有不同。</p><p>其实技术只是基础，合理的使用技术帮助团队把收益最大化才是最重要的。</p><p>很多翻过的旧书再看一遍会有所不同的理解。</p><p>这几年的经历让思想从点到面的转变，更加注重架构的选型、演进，保证需求的持续交付和快速迭代。</p><h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>已经30多岁的人了，下次写也不清楚是啥时候了。</p><p>自从上班后，感觉时间过得飞快，没有留下什么记忆，有时候会想这样生活值得么？</p><p>人的一生都是在探索，不知道明天会发生什么。</p><p>父母慢慢的老了，有一次视频中突然发现父母好像老了很多，明年希望能多带父母出去逛逛。</p><blockquote><p>我的价值是什么？</p></blockquote><p>对于家庭，健康生活是最大的价值。</p><p>对于社会，努力工作（并不是说996）是最大的价值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业后的每一年过的都很快，好像没留下什么记忆。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://simyy.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://simyy.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>分库分表</title>
    <link href="http://simyy.cn/2019/12/28/sharding/"/>
    <id>http://simyy.cn/2019/12/28/sharding/</id>
    <published>2019-12-28T02:00:25.000Z</published>
    <updated>2019-12-28T02:04:58.748Z</updated>
    
    <content type="html"><![CDATA[<p>分库分表是为了解决数据库读写的性能问题。</p><a id="more"></a><h4 id="分片方案"><a href="#分片方案" class="headerlink" title="分片方案"></a>分片方案</h4><p>分库分表的分片方案包括：<code>应用层分片</code>和<code>中间件分片</code>。</p><p><img src="/images/sharding_1.png" alt="分片方案"></p><hr><p><strong>应用层分片：</strong> 分片逻辑耦合在应用系统中，直连数据库。</p><p><strong>优势:</strong> 在于<code>直连</code>，性能更好，运维成本低。</p><p><strong>劣势:</strong> 由于耦合在应用系统中，升级问题较为麻烦，需要每个应用重新升级发布。</p><p>常见的方案有<code>Sharding-jdbc</code>、<code>TDDL</code>。</p><hr><p><strong>中间件分片：</strong> 分片逻辑作封装为独立中间件，独立部署，作为应用系统与数据库之间的代理。</p><p><strong>优势:</strong> 对应用系统无入侵，独立部署后也仅需升级中间件。</p><p><strong>劣势:</strong> 独立部署运维成本高，代理模式增加性能消耗。</p><p>常见的方案有<code>Atlas</code>、<code>Mycat</code>、<code>Cobar</code>.</p><hr><h4 id="数据切分"><a href="#数据切分" class="headerlink" title="数据切分"></a>数据切分</h4><blockquote><p>数据的切分方式分为两种：<code>垂直切分</code>和<code>水平切分</code>。</p></blockquote><p><code>垂直切分</code>是基于<code>业务边界</code>拆分的，数据相对独立，拆分几乎无副作用。</p><p><code>水平切分</code>是基于<code>业务逻辑</code>拆分的，是为了解决大表的拆分策略。</p><blockquote><p>在系统演进的过程中一般都会先经历<code>垂直切分</code>然后再经历<code>水平切分</code>。</p></blockquote><h5 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h5><p><code>垂直切分</code>是指按照业务将表进行分类，重新分配到不同的数据库上，从而实现请求压力的拆分。</p><p><img src="/images/sharding_1.png" alt="垂直切分"></p><p><strong>优点：</strong></p><ul><li>切分规则清晰（划分数据边界）</li><li>切分后数据维护性不变（原有<code>SQL</code>无影响）</li><li>切分后请求压力会由不同业务数据库独自承担（业务之间无影响）</li></ul><p><strong>缺点：</strong></p><ul><li>不同业务之间的事务处理复杂（涉及到分布式事务）</li><li>不同业务之间的表无法<code>JOIN</code>，需要做关联查询（<code>HTTP/RPC</code>）</li></ul><p>在垂直切分情况下，可能存在一张表拆分为多张表的情况，那么原有的<code>直接查询</code>可能就需要修改为<code>关联查询</code>。</p><p>为了避免<code>关联查询</code>带来的性能损耗，在满足业务的情况下，可以冗余部分字段信息来避免关联查询。</p><h5 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h5><p><code>水平切分</code>是指按业务逻辑对表中数据行的切分，把单表数据分配到多个数据库及多个表中，从而实现请求压力的拆分。</p><p><code>水平切分</code>注重的是<code>大表的切分</code>，是基于大表中<code>某个字段</code>的<code>某种规则</code>的切分。</p><blockquote><p>什么是大表？</p><p>业界公认MySQL单表容量在<code>1KW</code>以下是最佳状态，因为这时它的<code>B+TREE索引树高在3~5之间</code>。</p></blockquote><p><img src="/images/sharding_1.png" alt="水平切分"></p><p><strong>优点：</strong></p><ul><li>切分后不存在单库大表，读写性能更好</li></ul><p><strong>缺点：</strong></p><ul><li>切分规则会对SQL存在影响（任何SQL都需要带有<code>Sharding Key</code>）</li><li>跨库查询性能差，跨库事务处理复杂（涉及到分布式事务）</li><li>需要考虑后期数据的二次扩展</li><li>数据归档与归档查询</li><li>跨库<code>JOIN</code>性能差</li></ul><h4 id="切分策略"><a href="#切分策略" class="headerlink" title="切分策略"></a>切分策略</h4><p>由于<code>垂直切分</code>是基于业务边界的切分，需要问题在于业务边界的划分，这里不再讨论。</p><p>这里仅分析<code>水平切分</code>。</p><blockquote><p><code>切分策略</code>可以分为：<code>Hash切分</code>和<code>Range切分</code>。</p></blockquote><p><code>数据切分</code>都是基于<code>Sharding Key</code>的，而<code>Sharding Key</code>的选择与业务SQL是强关联的。</p><p>例如，数据库应存在1亿的用户数据，此时需要对用户表进行切分，考虑到业务场景下，大部分的请求都是基于用户纬度来查询的，因此使用用户ID作为<code>Sharding Key</code>来做数据切分。</p><h5 id="Hash切分"><a href="#Hash切分" class="headerlink" title="Hash切分"></a>Hash切分</h5><p><code>Hash切分</code>是最为常用的切分策略，一般采用<code>取模MOD</code>来切分数据表，但其水平扩展会造成<code>数据的迁移</code>。</p><p><img src="/images/sharding_4.png" alt="Hash切分"></p><p>建议取模方式：<code>MOD（2^n）</code>，可以避免部署数据的迁移，例如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 % 4 == 10 % 8 == 2</span><br></pre></td></tr></table></figure><blockquote><p>考虑到水平扩展的性能，可以使用一致性Hash算法来切分数据。</p></blockquote><h6 id="一致性Hash切分"><a href="#一致性Hash切分" class="headerlink" title="一致性Hash切分"></a>一致性Hash切分</h6><p>与哈希方法一样，<code>Hash环</code>利用环形形状来表示<code>取模MOD</code>后节点分布情况。</p><p>但是在节点扩容的情况下，不再需要</p><blockquote><p>一致性Hash的优势在于：节点扩容和缩容不会导致大量数据的迁移。</p></blockquote><p><code>一致性Hash</code>的关键：</p><ul><li><code>顺序针</code>寻找最近的节点作为存储数据存储节点</li><li>利用<code>虚拟节点</code>来均衡各个节点的负载情况</li></ul><p><img src="/images/sharding_5.png" alt="一致性Hash"></p><h5 id="Range切分"><a href="#Range切分" class="headerlink" title="Range切分"></a>Range切分</h5><p><code>Range切分</code>是利用数据<code>时间</code>或<code>ID</code>来切分数据表，常用于日志、归档数据的切分，是一种顺序切分。</p><p>切分规则可控，水平扩展不会造成数据迁移，扩展更容易。</p><p>由于数据是按顺序切分的，无法解决集中写入瓶颈的问题，而且存在跨库跨表查询性能查。</p><p><img src="/images/sharding_6.png" alt="Range切分"></p><h4 id="拆分数量"><a href="#拆分数量" class="headerlink" title="拆分数量"></a>拆分数量</h4><p>数据库一般被部署在物理机上，其性能受物理机的影响。</p><blockquote><p>数据库的性能与CPU、内存有直接关系。</p></blockquote><p>常见情况下，一台物理机部署多个数据库实例，多个数据库实例共享同一台主机的性能。</p><p>由于物理机的性能有限，所以在同一台物理机上增加过多的实例是无效的。</p><blockquote><p><strong>集群性能的定义：</strong></p><p><code>Sharding集群性能 = Sharding集群物理机的数量 * 单台物理机的性能</code></p></blockquote><p>具体拆分方式不仅需要通过业务场景来决定的，而且需要DBA合理部署<code>Sharding集群</code>，从而才能实现Sharding集群性能的最大化。</p><h4 id="分布式唯一ID"><a href="#分布式唯一ID" class="headerlink" title="分布式唯一ID"></a>分布式唯一ID</h4><p>在单库单表的情况下，直接使用数据库<code>自增ID</code>。</p><p>在分库分表的情况下，数据分布在不同库表上，无法使用数据库<code>自增特性</code>，需要使用<code>分布式唯一ID</code>。</p><h5 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h5><p><code>UUID</code>一般通过本地网卡、时间和随记数来生成。</p><ul><li>16字节128位，36个字符长度不适合做主键，存储成本高</li><li>无序，作为主键时会导致B+树索引在写的时候有过多的随机写操作</li></ul><blockquote><p>聚集主键的InnoDB会按照主键进行数据排序，因此要求分布式唯一ID具有<code>有序性</code>；</p></blockquote><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p><code>Redis</code>提供了<code>incr/increby</code>原子操作，从而可以用来生成分布式ID。</p><ul><li>基于内存自增生成ID，性能较好</li><li>内存自增操作保证ID有序</li><li>单机部署存在可用性问题，需要集群解决单点问题</li><li>双击部署、数据持久化</li></ul><blockquote><p>数据库在插入数据时对分布式ID是强依赖，如果出现问题会导致无法正常插入数据，所以需要保证分布式ID生成器的高可用。</p></blockquote><p>使用<code>incr</code>仅可以生成一个ID；<br>使用<code>increby</code>可以批量生成多个ID，可用于批量插入数据；</p><h5 id="Snowflake"><a href="#Snowflake" class="headerlink" title="Snowflake"></a>Snowflake</h5><p><code>Snowflake</code>是<code>Twitter</code>利用<code>Zookeeper</code>实现了一个全局ID生成的服务。</p><p><code>Snowflake</code>生成的<code>分布式唯一ID</code>的组成 (由高位到低位):</p><ul><li>41 bits: Timestamp (毫秒级)</li><li>10 bits: 节点 ID (datacenter ID 5 bits + worker ID 5 bits)</li><li>12 bits: sequence number</li></ul><p><img src="/images/sharding_7.png" alt="雪花算法"></p><p><strong>优点：</strong></p><ul><li>高性能，低延迟</li><li>按时间有序</li></ul><p><strong>缺点：</strong></p><ul><li>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">Leaf——美团点评分布式ID生成系统</a></p><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><p><code>数据迁移</code>是分库分表的重要工作，按照切分逻辑把历史数据迁移至新的分库分表数据库中。</p><p>常见的两种方式：<code>停机迁移</code>和<code>在线迁移</code>。</p><h5 id="停机迁移"><a href="#停机迁移" class="headerlink" title="停机迁移"></a>停机迁移</h5><p> 数据迁移过程中需要<code>停止相关服务</code>，优势在于迁移过程简单。</p><p> 由于迁移过程中不会产生新的数据，所以迁移过程仅需要一次，迁移完成后恢复服务运行。</p><p> 此方法仅适用于那些调用频次低、暂时停机无影响的服务。</p><h5 id="在线迁移"><a href="#在线迁移" class="headerlink" title="在线迁移"></a>在线迁移</h5><p>数据迁移过程中服务正常运行，优势在于不影响系统运行，但迁移过程复杂。</p><p><strong>迁移步骤为：</strong></p><ul><li>在不影响主库的情况下，基于从库同步历史数据到目标库表中</li><li>上一步同步完成后，切换数据写入开关状态到<code>双写状态1</code>（同步写入历史库表、异步写入切分库表）</li><li>定期检查历史库表和切分库表的数据差异，如果存在数据差异，再次同步差异数据到切分库表</li><li>当数据基本无差异的情况下，切换数据开关状态到<code>双写状态2</code>（同步写入切分库表、异步写入历史库表），此时读写迁移至切分库表</li><li>定期检查历史库表和切分库表的数据差异，如果存在数据差异，再次同步差异数据到历史库表</li><li>稳定运行一段时间后才可以停止历史库表的写入，否则无法实现切分的回滚</li></ul><blockquote><p><code>双写状态</code>这里需要注意下，尽量避免双数据源的同步写入，辅助同步逻辑可以通过异步方式实现。</p></blockquote><p><img src="/images/sharding_8.png" alt="数据迁移"></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><blockquote><p>只有当数据库性能不能满足业务发展时，才真的需要进行分库分表。</p></blockquote><p>分库分表只会给系统增加复杂度，原本一条SQL可以处理的数据，跨库操作存在大量的网络延迟及数据聚合，将会带来大量的性能损耗。</p><hr><blockquote><p>分库分表不是必须的！</p></blockquote><p>有些场景下，数据是可以通过<code>归档的方式</code>来减少数据的量级。</p><p><code>ES+HBase</code>是比较常见的归档方案，其中，<code>ES</code>仅存储索引字段，<code>HBase</code>存储全量数据。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.infoq.cn/article/ZMlCBpIhOThWJeqmZD4I" target="_blank" rel="noopener">数据库分库分表基础和实践</a><br><a href="https://www.cnblogs.com/405845829qq/p/7552750.html" target="_blank" rel="noopener">MySQL分库分表方案</a><br><a href="https://zhuanlan.zhihu.com/p/24036067" target="_blank" rel="noopener">大众点评订单系统分库分表实践</a><br><a href="https://cloud.tencent.com/developer/article/1448626" target="_blank" rel="noopener">分库分表最佳实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分库分表是为了解决数据库读写的性能问题。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Sharding" scheme="http://simyy.cn/tags/Sharding/"/>
    
  </entry>
  
  <entry>
    <title>SOLID设计原则</title>
    <link href="http://simyy.cn/2019/12/21/solid-priciple/"/>
    <id>http://simyy.cn/2019/12/21/solid-priciple/</id>
    <published>2019-12-21T08:14:27.000Z</published>
    <updated>2019-12-21T09:26:17.483Z</updated>
    
    <content type="html"><![CDATA[<p>SOLID设计原则主要用于解决如何构建可持续性的软件架构。</p><a id="more"></a><h4 id="SRP"><a href="#SRP" class="headerlink" title="SRP"></a>SRP</h4><p><code>SRP</code>全称为<code>Single Responsibility Principle</code>，译为<code>单一职责原则</code>。</p><p><strong>定义：</strong></p><blockquote><p>There should never be more than one reason for a class to change.</p><p><code>任何一个软件模块都应该有且仅有一个被修改的原因</code>。</p></blockquote><p>在<code>Clean Architecture</code>中，重新定义如下:</p><blockquote><p><code>任何一个软件模块都应该只针对某一类行为负责</code>。</p></blockquote><p>相比之下，第二种定义更让人容易理解，因为它是站在<code>职责边界</code>的角度来分析职责的划分。</p><p>在面向对象的设计中，<code>高内聚、低耦合</code>是评判一个软件设计好坏的标准。</p><blockquote><p><code>内聚</code>：模块内部元素之间关联的程度。<br><code>耦合</code>：模块之间关联的程度。</p></blockquote><p><code>高内聚</code>与<code>低耦合</code>相辅相成，<code>高内聚</code>自然会带来<code>低耦合</code>的效果。</p><p>在软件设计层面上，<code>SRP</code>是一种抽象概念，与<code>高内聚、低耦合</code>是同样的目的，都是为了实现模块功能的职责独立。</p><p>“模块仅负责<code>某一类行为</code>“ 不就是<code>高内聚</code>的一种表现方式。</p><hr><blockquote><p>如何实现<code>SPR</code>？</p></blockquote><p>上面有提到实现<code>SPR</code>的关键在于<code>聚类行为</code>，那么行为如何聚类呢？</p><p>利用<code>领域驱动设计</code>的思想找到模块的边界，从而实现行为的归类。</p><hr><h4 id="OCP"><a href="#OCP" class="headerlink" title="OCP"></a>OCP</h4><p><code>OCP</code>全称为<code>Open Closed Principle</code>，译为<code>开闭原则</code>。</p><p><strong>定义：</strong></p><blockquote><p>Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</p><p><code>一个软件实体（如类，模块和函数）应该对扩展开放，对修改关闭。</code></p></blockquote><p><code>Open</code>对应的是<code>扩展</code>，<code>Closed</code>对应的是<code>修改</code>。</p><p>换一个角度来思考<code>OCP</code>，面对需求变化是否需要修改历史代码？</p><blockquote><p><code>软件设计应该通过扩展来实现变化，而不是通过修改来实现变化。</code></p></blockquote><p><code>修改</code>意味着改变原有逻辑，变化可能带来副作用，尤其对于那些年久失修、无人维护的代码来说。</p><p>因此，强调通过<code>扩展</code>的方式来拥抱需求变化更为合适，而这里的扩展的手段是<code>抽象化</code>。</p><hr><blockquote><p>如何实现<code>OCP</code>？</p></blockquote><p><code>抽象化</code>是实现<code>OCP</code>的关键，具体可以通过<code>面向接口编程</code>和<code>面向抽象编程</code>。</p><p>通过<code>接口和抽象</code>来限定功能范围，具体行为通过具体实现来控制（<code>多态</code>和<code>继承</code>）。</p><p>模块之间的依赖仅通过<code>接口和抽象</code>来关联，与具体逻辑无关，每当需求发生变更的时候，在不改变<code>接口和抽象</code>的前提下通过增加新的实现来满足需求。</p><hr><h4 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h4><p><code>LSP</code>全称为<code>Liskov Substitution Principle</code>，译为<code>里氏替换原则</code>。</p><p><strong>定义：</strong></p><blockquote><p>Functions that use pointers or references to base classes must be able to useobjects of derived classes without knowing it.</p><p>引用基类的地方都可以透明地使用其子类对象。</p></blockquote><p><code>LSP</code>的关键在于<code>可替换</code>。</p><p>在面向对象的编程方式中，<code>可替换</code>可以基于<code>继承</code>来实现。</p><p><code>继承</code>的特点是<code>子类</code>拥有<code>父类</code>所有堆外暴露的功能。</p><p>在实际情况下，<code>继承</code>的使用方式：</p><ul><li><code>代码复用</code>，父类实现共享方法，父类方法不可被重写，父类可实例化</li><li><code>代码复用+多态</code>，父类实现共享方法，并提供待子类实现的抽象方法，<code>父类一般为抽象类，不允许实例化</code></li></ul><p><code>LSP</code>中的<code>可替换</code>也就是多态的一种表现，通过<code>接口</code>和<code>抽象类</code>来做模块之间的关联，与模块的具体实现无关。</p><blockquote><p><code>OCP</code>和<code>LSP</code>是相辅相成的，</p><p>前者关注<code>扩展</code>来解决模块内部变化的问题，后者关注<code>可替换</code>来解决模块之间逻辑变化的问题。</p></blockquote><h4 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h4><p><code>ISP</code>全称为<code>Interface Segregation Principle</code>，译为<code>接口隔离原则</code>。</p><p><strong>定义：</strong></p><blockquote><p>The dependency of one class to another one should depend on the smallest possible interface.</p><p>类间的依赖关系应该建立在最小的接口上。</p></blockquote><p><code>ISP</code>的关键在于<code>功能的划分</code>。</p><p><code>ISP</code>的目的在于避免过多的功能暴露给依赖方，也就是解决<code>Fat Interface</code>。</p><p><code>SRP</code>的目的在于<code>职责的划分</code>，属于边界划分的范畴，而<code>ISP</code>更倾向于<code>功能聚类</code>，让依赖者不必关心不需要的功能方法。</p><p>职责下所涉及的功能如果太多，可以划分为多个功能聚类来简化功能的检索，不仅可以帮忙开发者更好管理功能，也可以帮忙依赖方对接口功能的划分更加清晰。</p><hr><blockquote><p>先满足<code>ISP</code>还是<code>SRP</code>？</p></blockquote><p>在软件设计初期需要考虑的是<code>SRP</code>，职责的划分更为重要。</p><p>在解决职责问题之后，在功能设计阶段就需要考虑<code>ISP</code>，包括</p><ul><li>解决<code>Fat Interface</code>的问题</li><li>功能方法聚类，隔离无关功能，让依赖变得更简单</li></ul><hr><h4 id="DIP"><a href="#DIP" class="headerlink" title="DIP"></a>DIP</h4><p><code>DIP</code>全称为<code>Dependency Inversion Principle</code>，译为<code>依赖倒置原则</code>。</p><p><strong>定义：</strong></p><blockquote><p>High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p><p>高层模块不应该依赖于低层模块，两者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>当修改接口的时必然会修改实现，但修改实现不需要修改接口。</p><blockquote><p>接口比实现更稳定。</p></blockquote><p>任何具体逻辑的实现及修改和接口抽象无关，依赖方只需要关注接口是否变化，并不需要关注细节本身（这往往是分工开发中需要注意的问题）。</p><blockquote><p><code>DIP</code>是一种<code>松耦合</code>的设计原则。</p></blockquote><p><code>DIP</code>是站在抽象的角度上来建立模型，更类似于伪代码，确定整体的设计思路（模块或功能间的耦合关系）。</p><p><code>OCP</code>、<code>LSP</code>是具体的实现方式，通过<code>扩展</code>和<code>替换</code>来实现不同逻辑细节。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SOLID设计原则主要用于解决如何构建可持续性的软件架构。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="软件设计" scheme="http://simyy.cn/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Reactor &amp; Proactor</title>
    <link href="http://simyy.cn/2019/12/16/re-pro-actor/"/>
    <id>http://simyy.cn/2019/12/16/re-pro-actor/</id>
    <published>2019-12-16T14:52:17.000Z</published>
    <updated>2019-12-17T02:25:10.605Z</updated>
    
    <content type="html"><![CDATA[<p>总结常见的两种网络模型设计模式Reactor和Proactor。</p><a id="more"></a><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p>在网络模型设计中，有两个的高性能模型：<code>Reactor</code>和<code>Proactor</code>。</p><p>这里会涉及到<code>同步/异步</code>、<code>阻塞/非阻塞</code>两个知识点。</p><p><strong>同步/异步</strong>：应用程序和系统内核之间交互（通信）方式，主动监听还是被动通知。</p><p><code>select/poll/epoll</code>都需要用户程序不断轮询检查IO操作是否就绪，所以它们都属于<code>同步IO</code>。</p><p><code>Boost.Asio</code>通过对<code>epoll</code>的二次封装实现了<code>异步IO</code>，WIN下的<code>IOCP</code>同样也属于<code>异步IO</code>；</p><p><strong>阻塞/非阻塞</strong>：用户进程执行IO操作后如何等待调用结果。</p><p>进程挂起等待属于<code>阻塞</code>，进程直接返回等待下次重试属于<code>非阻塞</code>。</p><h3 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h3><p><code>Reactor</code>属于<code>同步非阻塞</code>模型。</p><p><strong>同步</strong>：同步监听，需要用户端主动监听IO就绪状态。</p><p><strong>非阻塞</strong>：用户进程执行IO操作后不会导致用户进程的挂起，会通过重试的方式来尝试获取执行结果。</p><p>Reactor模型中，主要分为<code>Acceptor</code>、<code>Reactor</code>、<code>Handler</code>三个主要组件。</p><ul><li><strong>Acceptor</strong>：获取客户端链接，绑定客户端注册事件。</li><li><strong>Reactor</strong>：监控触发的事件，并分发给对应的事件处理器。</li><li><strong>Handler</strong>：处理对应的事件请求，例如，读写处理器、加解密处理器、命令执行处理器等。</li></ul><p><code>Reactor组件</code>是模型中的关键组件（也是和<code>Proactor</code>的不同之处），包括以下两部分：</p><ul><li>通过不断轮询<code>select/epoll</code>来监听准备就绪的事件；</li><li>通过<code>Dispatch</code>来分发事件到对应的时间处理器。</li></ul><blockquote><p><code>Reactor</code>中的读和写是由<code>应用程序</code>来决定何时操作的。</p></blockquote><p>Reactor模型的实现方式：<code>单Reactor单处理器</code>、<code>单Reactor多处理器</code>、<code>多Reactor多处理器</code>。</p><h5 id="单Reactor单处理器"><a href="#单Reactor单处理器" class="headerlink" title="单Reactor单处理器"></a>单Reactor单处理器</h5><p><code>单Reactor单处理器</code>也就是简单的单线程模型。</p><p><img src="/images/RE_PRO_ACTOR_1.png" alt=""></p><h5 id="单Reactor多处理器"><a href="#单Reactor多处理器" class="headerlink" title="单Reactor多处理器"></a>单Reactor多处理器</h5><p><code>单Reactor多处理器</code>是通过处理器多线程化来实现并发能力，但是需要考虑多处理器的并发情况下<code>资源竞争</code>的问题。</p><p><img src="/images/RE_PRO_ACTOR_2.png" alt=""></p><h5 id="多Reactor多处理器"><a href="#多Reactor多处理器" class="headerlink" title="多Reactor多处理器"></a>多Reactor多处理器</h5><p><code>多Reactor多处理器</code>是在<code>单Reactor多处理器</code>的基础之上，分离了<code>Acceptor</code>的能力，并且增加多个<code>子Reactor</code>来实现分而治之的方法。</p><p><img src="/images/RE_PRO_ACTOR_3.png" alt=""></p><h3 id="Proactor"><a href="#Proactor" class="headerlink" title="Proactor"></a>Proactor</h3><p><code>Reactor</code>属于<code>异步非阻塞</code>模型。</p><p><strong>异步</strong>：异步回调，系统自动回调用户程序通知IO就绪状态。</p><p><strong>非阻塞</strong>：同<code>Reactor</code>。</p><p><code>Proactor</code>模型中，主要分为<code>Proactor</code>、<code>Proactor Initiator</code>、<code>Handler</code>、<code>Asynchronous Operation Processor</code>四个主要组件。</p><ul><li><strong>Asynchronous Operation Processor</strong>：异步操作处理器，操作系统提供；</li><li><strong>Proactor Initiator</strong>：事件注册器，用于注册事件以及对应的事件处理器；</li><li><strong>Proactor</strong>：用于监听触发的事件，并分发给不同的事件处理器处理；</li><li><strong>Handler</strong>：同<code>Reactor</code>。</li></ul><p><img src="/images/RE_PRO_ACTOR_4.png" alt=""></p><blockquote><p>在<code>Proactor</code>中，<code>数据的读写</code>都是由<code>系统内核</code>来实现的，<code>应用程序</code>只是从<code>缓存区</code>上进行读写。</p></blockquote><p>Proactor模型的关键在于系统提供的<code>Asynchronous Operation Processor</code>异步操作处理器。</p><blockquote><p>由于基于<code>缓存区的</code>交互方式，<code>Proactor</code>中的读和写是<code>操作系统</code>来决定何时操作的。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Reactor</code>和<code>Proactor</code>均为非阻塞I/O模型。</p><p><code>Reactor</code>是同步的（主动查询），<code>Proactor</code>是异步的（被动通知）。</p><p><code>Proactor</code>接收到的是IO操作已完成事件（缓存区），<code>Reactor</code>接收到的是IO操作就绪事件。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;mid=2247483941&amp;idx=1&amp;sn=97628f4d69d8607badf39bfeb7557457&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">彻底搞懂Java的网络IO</a><br><a href="https://zhuanlan.zhihu.com/p/35065251" target="_blank" rel="noopener">Linux 的 IO 通信 以及 Reactor 线程模型浅析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结常见的两种网络模型设计模式Reactor和Proactor。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="网络" scheme="http://simyy.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="网络模型" scheme="http://simyy.cn/tags/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>分布式任务调度</title>
    <link href="http://simyy.cn/2019/12/08/distributed-job-dispatch/"/>
    <id>http://simyy.cn/2019/12/08/distributed-job-dispatch/</id>
    <published>2019-12-08T04:19:34.000Z</published>
    <updated>2019-12-17T02:24:47.671Z</updated>
    
    <content type="html"><![CDATA[<p>任务调度解决定时触发的问题，分布式解决单点触发的问题。</p><a id="more"></a><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><blockquote><p><code>任务调度</code>来<code>触发</code>那些无法自动触发的任务。</p></blockquote><p>任务调度中最重要的三个基础组件：<code>任务</code>、<code>触发器</code>和<code>执行器</code>。</p><p><strong>任务</strong>：保存待处理的任务，包括任务的触发的关键信息（例如，目标地址、调用方式、触发参数）。</p><p><strong>触发器</strong>：保存待处理任务的执行时间，包括定时触发、周期触发。</p><p><strong>执行器</strong>：任务触发的媒介，任务达到触发状态后都交于执行器来触发任务的执行。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>任务调度的组件大体依赖关系如下图，</p><p><img src="/images/distributed_job_dispatch_1.png" alt="组件依赖关系"></p><p><strong>任务的创建和触发流程</strong>：</p><ul><li>创建<code>Job</code>，并指定具体的任务类型（<code>RpcJob</code>或<code>HttpJob</code>）；</li><li>创建<code>Trigger</code>作为任务的触发器，指定任务触发方式（<code>TimeTrigger</code>或<code>CrondTrigger</code>）；</li><li>计算<code>Trigger</code>下一次触发时间；</li><li>关联<code>Job</code>和<code>Trigger</code>，用于组装<code>JobContext</code>；</li><li>扫描<code>最近一段时间内</code>待触发的<code>Trigger</code>，并组装对应的<code>JobContext</code>；</li><li><code>Executor</code>拉取待触发的<code>JobContext</code>，按<code>Trigger</code>指定的执行时间来执行<code>Job</code>。</li></ul><h4 id="任务状态"><a href="#任务状态" class="headerlink" title="任务状态"></a>任务状态</h4><p>任务调度系统的状态可划分为：</p><p><img src="/images/distributed_job_dispatch_2.png" alt="任务状态流转图"></p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>对于单机任务调度系统来说，存在问题包括：<code>单点故障</code>、<code>任务堆积</code>。</p><blockquote><p>分布式系统通过把任务分配给到不同的调度节点来解决<code>单点</code>和<code>任务堆积</code>的问题。</p></blockquote><p>常见的分布式解决方案：</p><ul><li><code>Quartz</code>：基于数据库实现作业的高可用，存在代码入侵。</li><li><code>Elastic Job</code>：采用zookeeper实现分布式协调，实现任务高可用以及分片。</li></ul><h5 id="并行调度"><a href="#并行调度" class="headerlink" title="并行调度"></a>并行调度</h5><blockquote><p><code>并行调度</code>：将任务分配到多个实例节点，使得多个应用实例能并行执行任务，以提升调度系统的执行效率。</p></blockquote><p>从单实例到多实例，<code>任务的分配</code>是<code>并行调度</code>的关键问题，常见的分配方式包括：</p><p><code>哈希分配</code>：计算任务的哈希值，分配到固定的实例节点，需要处理集群扩容和缩容的问题。</p><p><code>负载优先分配</code>：需要动态调整各个实例节点的负载压力，难点在于机器负载的定义与计算。</p><p><code>平均分配</code>：任务轮询分配到各个集群实例节点。</p><p><code>抢占式分配</code>：实现相对简单，不需要集群的管理节点来实现，只需要控制好并发锁的问题。</p><h5 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h5><blockquote><p><code>高可用性</code>：当执行任务的应用实例崩溃后，其他应用实例可以继续执行该任务。</p><p>也就是说，如何保证分布式中节点异常情况下，所有任务的正常执行。</p></blockquote><p><code>异常节点的任务迁移</code>是关<code>高可用</code>的键问题。</p><p>迁移必然带来任务的<code>动态分配</code>问题（与扩容类似），具体方法与使用的<code>任务分配</code>方式相关。</p><ul><li><code>哈希分配</code>：采用<code>一致性哈希算法</code>来解决节点异常导致的大量的任务迁移问题；</li><li><code>负载优先分配</code>：把节点异常的任务迁移到负载最低的节点来处理；</li><li><code>平均分配</code>：把节点异常的任务平均分配到集群其他节点上。</li><li><code>抢占式分配</code>：把节点异常的任务丢回任务池中等待其他节点来抢占。</li></ul><p>其中，负载优先分配方式下需要实时监控每个实例节点的负载能力，并需要实现动态调整实例的负载，实现任务的高效执行。</p><blockquote><p>集群实例节点的状态如何监控？</p></blockquote><p>利用<code>Zookeeper</code>和<code>Etcd</code>来实现应用实例状态的监控，当发生异常情况时及时迁移异常节点的待处理任务。</p><p>一般情况下，集群中会有一台实例节点充当管理者，利用<code>Zookeeper</code>和<code>Etcd</code>的分布式协调能力来选择集群的管理者，并监控整个集群的状态。</p><blockquote><p><code>Zookeeper</code>和<code>Etcd</code>分别实现了<code>zab</code>和<code>raft</code>一致性算法，可以辅助其他系统实现集群的状态管理。</p></blockquote><hr><p>下图代表了一致性hash来实现集群任务的分配及异常节点的任务迁移。</p><p><img src="/images/distributed_job_dispatch_3.png" alt="一致性哈希下的任务分配和异常迁移"></p><hr><h5 id="弹性扩容"><a href="#弹性扩容" class="headerlink" title="弹性扩容"></a>弹性扩容</h5><blockquote><p><code>动态扩容</code>：当集群无法满足大量任务的并发执行时，需要动态增加集群实例数量，同时保证历史任务的正常触发。</p></blockquote><p>上面有提到过，<code>一致性哈希</code>来实现任务的哈希分配扩容情况下造成的节点任务迁移问题。</p><p>此外，在扩容过程中也需要考虑扩容的任务迁移对任务的准时执行是否存在的影响，如果存在影响的话，是否可以考虑把可能会受到影响的任务留在当前实例节点。</p><h5 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h5><blockquote><p>只要是程序就会出现异常，任务调度也不例外，异常处理也是重要的一部分。</p></blockquote><p>失败一般包括以下几种情况：</p><ul><li>集群实例节点down机</li><li>任务调用超时</li><li>任务无法调用到目标应用（网络 or 目标应用down机）</li></ul><p>任务调度系统需要设置合理的<code>任务重试机制</code>，包括<code>重试次数</code>、<code>超时时间</code>等。</p><p>此外，对于异常任务，需要配置对应的<code>报警策略</code>来通知相关业务人员及时处理异常问题。</p><h5 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h5><blockquote><p>集群的并行处理能力是有限的，在满足需求的条件下，允许配置任务的优先级。</p></blockquote><p>任务调度系统中，通过设置<code>不同的优先级的任务处理器</code>来实现任务的优先处理。</p><p><code>带有优先级的任务处理器</code>可以由预分配多个线程池来处理，优先级的高低决定了任务处理器线程池中并发执行线程的数量，高优先级的线程池配置更多的线程，低优先级的线程池配置更少的线程，从而实现高低优先级任务的隔离处理。</p><h5 id="任务分片"><a href="#任务分片" class="headerlink" title="任务分片"></a>任务分片</h5><blockquote><p><code>任务分片</code>：任务按照参数可以拆分成多个子任务，子任务下发到集群的不同实例节点并发执行。</p></blockquote><p>任务分片的关键问题：<code>任务的拆分</code>。</p><p>可以分片的任务一定是可以<code>逻辑拆分</code>的，拆分之后的子任务没有任何关联关系。</p><p>例如，为每一个用户统计他最近一天的消费信息，可以按照用户id的取模方式来实现任务的拆分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. id % 5 = 任务拆分为5个子任务</span><br><span class="line">2. 5个子任务分配分配到集群的5个节点来并发执行</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>任务调度的目的是准时触发任务，分布式的目的是解决单点问题，通过zookeeper和etcd等组件来实现集群的状态管理。</p><p>为了试下准时触发和优先级触发，实例节点需要配置对应的线程池来实现高低优先级任务的隔离。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://zhuanlan.zhihu.com/p/26493355" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26493355</a><br><a href="https://juejin.im/post/5c55ac0bf265da2da771a216" target="_blank" rel="noopener">https://juejin.im/post/5c55ac0bf265da2da771a216</a><br><a href="https://www.cnblogs.com/davidwang456/p/9057839.html" target="_blank" rel="noopener">https://www.cnblogs.com/davidwang456/p/9057839.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任务调度解决定时触发的问题，分布式解决单点触发的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="中间件" scheme="http://simyy.cn/categories/%E6%9E%B6%E6%9E%84/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="http://simyy.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="架构" scheme="http://simyy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="分布式" scheme="http://simyy.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="任务调度" scheme="http://simyy.cn/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
</feed>
